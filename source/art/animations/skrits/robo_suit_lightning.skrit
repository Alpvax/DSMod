// Animation Skrit: robo_suit_lightning
//
// History:
//		VERSION 1.0:	Initial implementation
//		VERSION 2.0:	Added support to aim at an enemy.
//
// Custon skrit made just for the robo_suit
//												

property int MAJORVERSION$ = 2;
property int MINORVERSION$ = 0;

owner = Aspect;

float angle$ = 3.14;
float speed$ = 1.0;
float fire_time$ = 0;
goid Target$;
goid ParentTarget$;
goid m_Owner$;

/////////////////////////////////////////////////////////////////////////////
// Utilities

float Bound$ ( float a$ )
{
	if( a$ > 3.14159)
 	{
 		return( a$ - 6.2832 );
 	} else if ( a$ < -3.14159 ) {
 		return( a$ + 6.2832 );
 	}
 	return( a$ );
}

float ComputeOrbit$ ( Goid targ$ )
{
	if( targ$.IsValid && m_Owner$.IsValid() )
	{
		if( m_Owner$.Go.Parent != NULL )
		{
			return GoMath.OrbitAngleToTarget( m_Owner$.Go.Parent.Goid, targ$ );
		}
	}
	return( 0.0 );
}

RestartChore$ ( int /* newanim$ */ )
{ 
	Target$ = m_Owner$.Go.Mind.EngagedObject;
	if( owner.parent != NULL )
	{
		ParentTarget$ = owner.parent.Goid.Go.Mind.EngagedObject;
	}
}

startup state InitialState$ 
{
	event OnStartChore$ ( int /*subanim$*/, int /*flags$*/ )
	{
		m_Owner$ = owner.Goid;
		RestartChore$ ( 1 );
		SetState Animating$;
	}
}

/////////////////////////////////////////////////////////////////////////////
// States

state Animating$	
{
 
	event OnStartChore$ ( int /*subanim$*/, int /*flags$*/ )
	{
		m_Owner$ = owner.Goid;
		RestartChore$( 0 );
 	}

	event OnUpdate$( float delta_t$ )
	{
		if( owner.parent == NULL ) // our parent is dead, we will be destroyed shortly
		{
			return;
		}
		
		float new_angle$ = angle$;
		
		if( !Target$.Isvalid )
		{
//			report.generic("Bad target\n");
			Target$ = owner.Goid.Go.Mind.EngagedObject;
		}
		
		if( !ParentTarget$.Isvalid )
		{
//			report.generic("Bad parent target\n");
			if( owner.parent != NULL )
			{
				ParentTarget$ = owner.parent.Goid.Go.Mind.EngagedObject;
			}
		}
		
 	 	float new_parent_angle$ = 3.1416 + ComputeOrbit$ ( ParentTarget$ );
		
		float turn_amount$ = 4.0 * speed$ * delta_t$;
 	 	
 	 	new_angle$ = ComputeOrbit$ ( Target$ ) - new_parent_angle$;

// 	 	report.genericf( "lightning new_angle: %g\n", new_angle$ );
		
 	 	float dif$ = (new_angle$ - angle$);
		
		if ( Math.Abs( dif$ ) > 3.14159 )
		{
			if (new_angle$ > angle$)
			{
				angle$ += 6.2832;
			} else {
				new_angle$ += 6.2832;
			}
			dif$ = (new_angle$ - angle$);
		}
		
		turn_amount$ = Math.MinFloat( Math.Abs( dif$ ) , turn_amount$);
		
		if( dif$ < 0 )
		{
			angle$ -= turn_amount$;
		} else {
			angle$ += turn_amount$;
		}
		
		angle$ = Bound$( angle$ );
		
		if( (angle$ < 0) && (angle$ > -1.5) )
		{
			if( angle$ < -0.75 )
			{
				angle$ = -1.5;
			} else {
				angle$ = 0;
			}
		}
		
//		report.genericf( "lightning Angle: %g\n", angle$ );

		float recoil$ = 0;
	    if( fire_time$ < .1 )
	    {
	    }
	    else if( fire_time$ < .3 )
	    {
	    	recoil$ = (fire_time$ - 0.1) / 0.2;
	    }
	    else if( fire_time$ < 1 )
	    {
	    	recoil$ = 1 - ( ( fire_time$ - 0.3 ) / 0.8 );
	    }

		owner.RotateBoneX("lightninggun_rot", 0.4 - ( 0.5 * recoil$ ) );
		owner.RotateBoneZ("lightninggun_rot", 3.1416 + angle$);
		
		fire_time$ += delta_t$;
//		report.genericf( "dif: %g Fire_time %g\n", dif$, fire_time$ );
		if( (Math.Abs( dif$ ) < 0.1) && ( fire_time$ > owner.goid.Go.Attack.ReloadDelay ))
		{
			fire_time$ = 0.0;
			PostWorldMessage( WE_ANIM_SFX, owner.goid, owner.goid,  1, 0 );
		}
 	}
}