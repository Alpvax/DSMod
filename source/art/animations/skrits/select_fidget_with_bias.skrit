// Animation Skrit: select_fidget_with_bias
//
// History:
//		VERSION 1.0:  derived from select fidget, speed bias IS applied	
//

property int MAJORVERSION$ = 1;
property int MINORVERSION$ = 0;

owner = Aspect;

/////////////////////////////////////////////////////////////////////////////
// Per Skrit Object storage
			   
/////////////////////////////////////////////////////////////////////////////
// Utilities

RestartChore$ ( int newanim$ ) { 

	int numanims$ = owner.Blender.GetNumSubAnims();

	if (numanims$ <= newanim$) {
		newanim$ = 0;
	}

	owner.blender.ResetTimeWarp();

	int bg$ = owner.blender.OpenBlendGroup();
	owner.blender.AddAnimToBlendGroup(newanim$,1);
	owner.blender.CloseBlendGroup();
	owner.blender.SetBlendGroupWeight(bg$,1);

	owner.UpdateBlender(0);

}

/////////////////////////////////////////////////////////////////////////////
// States

//----------------------------

startup state InitialState$ 
{
	event OnStartChore$ ( int subanim$, int /*flags$*/ )
	{
		RestartChore$ ( subanim$ );
		SetState FidgetOnce$;
	}
}

state FidgetOnce$ 
{

	event OnUpdate$( float delta_t$  )
	{

 	 	int events$ = owner.UpdateBlender(delta_t$);

		if (AnimEventBitTest(events$,ANIMEVENT_SFX_1)) {
			PostWorldMessage( WE_ANIM_SFX, owner.goid, owner.goid,  1, 0 );
		}
		if (AnimEventBitTest(events$,ANIMEVENT_SFX_2)) {
			PostWorldMessage( WE_ANIM_SFX, owner.goid, owner.goid,  2, 0 );
		}
		if (AnimEventBitTest(events$,ANIMEVENT_SFX_3)) {
			PostWorldMessage( WE_ANIM_SFX, owner.goid, owner.goid,  3, 0 );
		}
		if (AnimEventBitTest(events$,ANIMEVENT_SFX_4)) {
			PostWorldMessage( WE_ANIM_SFX, owner.goid, owner.goid,  4, 0 );
		}
		if (AnimEventBitTest(events$,ANIMEVENT_ATTACH_AMMO)) {
			PostWorldMessage( WE_ANIM_ATTACH_AMMO, owner.goid, owner.goid, owner.CurrentReqBlock, 0 );
		}
		if (AnimEventBitTest(events$,ANIMEVENT_HIDE_MESH)) {
			owner.SetHideMeshFlag(true);
		}
		if (AnimEventBitTest(events$,ANIMEVENT_SHOW_MESH)) {
			owner.SetHideMeshFlag(false);
		}
		if (AnimEventBitTest(events$,ANIMEVENT_FINISH)) {
			PostWorldMessage( WE_ANIM_DONE, owner.goid, owner.goid, owner.CurrentReqBlock, 0 );
			SetState (InitialState$);
		}
 	}

	event OnStartChore$ ( int subanim$, int /*flags$*/ )
	{
		RestartChore$ ( subanim$ );
	}

}

