// purpose: Kill 7 Barrels - expect an increase in skill level ...  BW  9/13/2001

/* use cmd line args - skritbot=auto\test\KillBarrel_7  skrit_retry=true   map=KillBarrel7   teleport=start    demo=true 
	use default Melée weapon - knife
	check for Melée experience increase upon barrel breaking
  */

//////////////////////////////////////////////////////////////////////////////

owner = GoSkritComponent;

#include "LogOut.skrit"

//  string			cBarrel$   =   "Barrel";
goActor			m_Actor$;
goAspect		m_Barrel$, m_Prev$;
property float	period$	=   0.2			doc = "Sample period, in seconds.";
bool			bResponse$;
float			fMSkill$;
bool            BExiting$ = false;
string          m_statement$;  // for log output
int				nBarrelsKilled$ = 0;
goMind			m_Mind$;
go				m_Go$;
int				i$;
bool			bAskedForBarrel$ = false;   // track requests for finding the barrel ...

startup state S$ trigger OnBotHandleMessage$( WE_WORLD_STATE_TRANSITION_DONE )
{
	if ( (WorldState.CurrentState == WS_SP_INGAME) || (WorldState.CurrentState == WS_MP_INGAME) )
	{
		myinit$(__NAME__);
				
		setstate SInGame2$;
	}
}

void getNextBarrel$()
{
	Go			temp$;

	m_Mind$.TempGopColl1.Clear;
//	 		m_Mind$.GetVisible( QT_ITEM, m_Mind$.TempGopColl1, 10000.0 );  // could not find all!
	bResponse$ = AIQuery.GetOccupantsInSphere(m_Go$.Placement.Position, 100.0, m_Mind$.TempGopColl1);
	debug.AssertF(bResponse$, "getNextBarrel$ %s line %d", __NAME__, __LINE__);
	 		
	i$ = 0;
		
	//I need to get a list of all visible, and locate the barrel - attack it if found.
//			Report.genericF("Looking for %d objects in the vicinity... ", m_Mind$.TempGopColl1.Size() );
	m_Barrel$ = NULL;
	bAskedForBarrel$ = false;
	while (! bAskedForBarrel$ )    // i$ < m_Mind$.TempGopColl1.Size() )
	{
		temp$ = m_Mind$.TempGopColl1.Get( i$ );
		debug.AssertF(temp$  != NULL, "getNextBarrel$ %s line %d", __NAME__, __LINE__);

//		Report.genericF("%d found item %s\n", i$,  temp$.TemplateName);
		
		if ( (temp$.TemplateName == "barrel_glb") && (temp$.Aspect.LifeState == ls_Alive_Conscious) && (m_Prev$ != temp$.Aspect) )
		{
			if (! bAskedForBarrel$)
			{
				m_Barrel$ = temp$.Aspect;
	 		
				// Go run and get it
				m_Mind$.SDoJob( MakeJobReq( JAT_MOVE, JQ_ACTION, QP_FRONT, AO_HUMAN, temp$.Placement.Position ) ); // was m_Go$...  not needed - already there
				m_Mind$.SDoJob( MakeJobReq( JAT_ATTACK_OBJECT, JQ_ACTION, QP_FRONT, AO_HUMAN, temp$.Goid ) );
//						report.generic("Job created: attack this barrel.\n");

				Stringtool.AssignF(m_statement$, "Job created: attack barrel # %d with Melee weapon.", nBarrelsKilled$ + 1);	
				logout$(nINFO$, "AUTOMATION", m_statement$);
				bAskedForBarrel$ = true;  // ask only once 
			}
		}
		if (i$ == (m_Mind$.TempGopColl1.Size() - 1) ) 
		{
			break;
		}
		else 
		{
			i$ += 1;   // continue in loop
		}
	}
}

state SInGame2$
{
	goInventory m_GO_Inv$;
	GoAspect	m_Aspect$;
	
 	FInGame$ at ( 5 frames )
	{
		Go			temp$;

		Go party$ = Server.GetScreenParty();

		debug.AssertF(party$ != NULL, "state SInGame2 %s line %d", __NAME__, __LINE__);
		
		m_Go$ = party$.Children.Get( 0 );
		if ( m_Go$ == NULL  )
		{
			logout$(nFAIL$, "SETUP", "Could not find Screen Party [essential]");
		}
		else
		{
			m_Mind$ = m_Go$.Mind;
//			report.genericF("in skrit %s\n", __NAME__);
			debug.AssertF(m_Mind$ != NULL, "state SInGame2 %s line %d", __NAME__, __LINE__);

			m_GO_Inv$ = m_Go$.Inventory;    // Get  goinventory
			debug.AssertF(m_GO_Inv$ != NULL, "state SInGame2 %s line %d", __NAME__, __LINE__);

			m_Aspect$ = m_Go$.Aspect;
			debug.AssertF(m_Aspect$ != NULL, "state SInGame2 %s line %d", __NAME__, __LINE__);

			m_Actor$  = m_Go$.Actor;
			debug.AssertF(m_Actor$  != NULL, "state SInGame2 %s line %d", __NAME__, __LINE__);

			fMSkill$ = m_Actor$.GetSkillLevel( "Melee" );
//			report.genericF("Melee skill starts at %f\n", fMSkill$);
			StringTool.AssignF(m_statement$, "Melee skill starts at %f", fMSkill$);
			logout$(nINFO$, "ATTRIBUTES", m_statement$);

	//		hero.Mind.SDoJob( MakeJobReq( JAT_GET, JQ_ACTION, QP_FRONT, AO_REFLEX,  MakeGoid( 
	 		//I want to make this look at all nearby items, and choose the most powerful one.
	 		//After picking it up, it's time to run away.  Get the loot and run!
	 		
	 		m_Mind$.TempGopColl1.Clear;
//	 		m_Mind$.GetVisible( QT_ITEM, m_Mind$.TempGopColl1, 10000.0 );  // could not find all!
			bResponse$ = AIQuery.GetOccupantsInSphere(m_Go$.Placement.Position, 100.0, m_Mind$.TempGopColl1);
			debug.AssertF(bResponse$, "state SInGame2 %s line %d", __NAME__, __LINE__);
	 		
	 		i$ = 0;
		
	 		//I need to get a list of all visible, and locate the barrel - attack it if found.
//			Report.genericF("Looking for %d objects in the vicinity... ", m_Mind$.TempGopColl1.Size() );
		
	 		while (! bAskedForBarrel$)    // i$ < m_Mind$.TempGopColl1.Size() )
	 		{
	 			temp$ = m_Mind$.TempGopColl1.Get( i$ );
				debug.AssertF(temp$  != NULL, "state SInGame2 %s line %d", __NAME__, __LINE__);

//				Report.genericF("found item %s\n",  temp$.material);
		
	 			if ( ( temp$.TemplateName == "barrel_glb" ) && (temp$.Aspect.LifeState == ls_Alive_Conscious) )
	 			{
					if ( ! bAskedForBarrel$)
					{
//			 			report.generic("Barrel was found.\n");
						m_Barrel$ = temp$.Aspect;
	 		
		 				// Go run and get it
	 					m_Mind$.SDoJob( MakeJobReq( JAT_MOVE, JQ_ACTION, QP_FRONT, AO_HUMAN, temp$.Placement.Position ) ); // was m_Go$...  not needed - already there
	 					m_Mind$.SDoJob( MakeJobReq( JAT_ATTACK_OBJECT, JQ_ACTION, QP_FRONT, AO_HUMAN, temp$.Goid ) );
//						report.generic("1st Job created: attack this barrel.\n");
						logout$(nINFO$, "AUTOMATION", "Job created: attack barrel # 1 with Melee weapon.");	
						bAskedForBarrel$ = true;  // ask only once 
					}
	 			}
				if (i$ == (m_Mind$.TempGopColl1.Size() - 1) ) 
				{
					i$ = 0;     // yes
				}
				else 
				{
		 			i$ += 1;   // continue in loop
				}
	 		}
 		}
		i$ = 0;           // prepare to count firings of TakeSample$
		setstate Wait$;
	}
}

////////////////////////////////////////
//	Wait$
state Wait$
{
	transition -> TakeSample$ :  OnTimer( 1 );

	event OnEnterState$
	{
		if ( (WorldState.CurrentState == WS_SP_OUTRO ) || (WorldState.CurrentState == WS_MP_SESSION_LOST ) )
		{	
			BExiting$ = true;
		}
		else
		{
			this.CreateTimer( 1, period$ );
			i$ += 1;
		}
	}
}

bool bBetween$(float a$, float b$, float c$)
{
	return((a$ >= b$) && (a$ <= c$));
}

////////////////////////////////////////
//	TakeSample$
state TakeSample$	
{
	event OnEnterState$
	{
		bool			bHavePotion$ = false; // track potion in inventory 

		fMSkill$ = m_Actor$.GetSkillLevel( "Melee" );
//		report.genericF("\t%f sec timer fired: Melee skill is now at %f ", period$, fMSkill$);
		debug.AssertF(m_Barrel$  != NULL, "state TakeSample$ %s line %d", __NAME__, __LINE__);

		if (m_Barrel$ != NULL)
		{
			if (m_Barrel$.LifeState == ls_Alive_Conscious)	// not broken yet?
			{
//				report.genericF("Barrel is not yet broken.\n");
				setstate Wait$;														// continue looping
			}
			else
			{
//				report.genericF("Barrel # %d is now broken...\n", nBarrelsKilled$ + 1);
				m_Prev$ = m_Barrel$;
				setstate MyCount$;
			}
		}
		else
		{
//			report.generic("An unbroken Barrel is not yet found!\n");
//			report.generic("Exiting as barrel was not found!\n");
//			setstate Ext$;
		}
		// last chance to guarantee completion, ready or not, within 4 seconds
		if (WorldTime.Time > 18.0)
		{
			logout$(nINFO$, "AUTOMATION", "exiting because TIME exceeds 18.0 seconds");
			setstate Ext$;
		}
	}
}

state MyCount$
{
	event OnEnterState$
	{
		nBarrelsKilled$ += 1;
		if (nBarrelsKilled$ >= 7) // time is up - check for level increase
		{
			setstate Ext$;
		}
		else
		{
			getNextBarrel$();
			setstate Wait$;	
		}
	}
}

state Ext$
{
	event OnEnterState$
	{
		fMSkill$ = m_Actor$.GetSkillLevel( "Melee" );
		StringTool.AssignF(m_statement$, "Melee skill actual %f expected %f", fMSkill$, 1.0000);
		if ( math.abs(fMSkill$ - 1.0000) < 0.05)
		{
//			report.generic("PASS Melée level points accrue test case\n");
			logout$(nPASS$, "ATTRIBUTES", m_statement$);
		}
		else
		{
//			report.generic("FAIL Melée level points accrue test case\n");
			logout$(nFAIL$, "ATTRIBUTES", m_statement$);
		}
		mydeinit$(__NAME__);
		bResponse$ = GpConsole.Execute( "exit\n");          // out of here
		debug.AssertF(bResponse$, "state TakeSample$ %s line %d", __NAME__, __LINE__);		
	}
}
