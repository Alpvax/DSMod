// $Created_by: Lokiswaq
// $Mod: BufUI_LoA
// $Revision: 2.00
// $Date: 4/12/2004
// $Comments: 0.98: Added some cosmetic changes.
// $Comments: 0.99: Put in the LoA spell components
// $Comments: 0.99: Moved toggle button to data_bar
// $Comments: 0.99: Added support for active buffs counter
// $Comments: 2.00: Just some minor code tweaks (MakeInt of GoIDs and optimisations)

[Lokiswaq_BufUI]
{
  intended_resolution_height = 600;
  intended_resolution_width = 800;
  interface = true;

  skrit =
  [[
  owner = UIWindow;
  //string skrit_name$ = "Lokiswaq_BufUI.gas";

  // these are global for a reason ;)
  string    myVarPrefix$ = "Lokiswaq_BufUI";
  GoID      hero_GoID$;       // the hero on whom the buff is on
  bool      slot_on$ = false; // does slot contain active buff's info?
  GoID      slot_GoID$;       // used to retrieve spell icons and buff descriptions
  int       slot_time$ = 0;   // remaining time
  string    slot_descr$ = ""; // the buff state description

  //
  // finds which special skrit component a spell calls and
  // returns the appropriate description property into slot_descr$
  //
  void my_Find_Buff_Descr$( GoID spell$ )
  {
    if ( spell$.IsValid() )
    {
      if ( spell$.Go.HasComponent( "spell_status_effect" ) == true ) {
        slot_descr$ = spell$.Go.getComponentString( "spell_status_effect", "description" );
        return;
      }
      if ( spell$.Go.HasComponent( "spell_reactive_armor" ) == true ) {
        slot_descr$ = spell$.Go.getComponentString( "spell_reactive_armor", "description" );
        return;
      }
      if ( spell$.Go.HasComponent( "spell_fire" ) == true ) {
        slot_descr$ = spell$.Go.getComponentString( "spell_fire", "description" );
        return;
      }
      if ( spell$.Go.HasComponent( "spell_balance" ) == true ) {
        slot_descr$ = spell$.Go.getComponentString( "spell_balance", "description" );
        return;
      }
      if ( spell$.Go.HasComponent( "spell_multiple_hit" ) == true ) {
        slot_descr$ = spell$.Go.getComponentString( "spell_multiple_hit", "description" );
        return;
      }
      if ( spell$.Go.HasComponent( "spell_death_explosion" ) == true ) {
        slot_descr$ = spell$.Go.getComponentString( "spell_death_explosion", "description" );
        return;
      }
      if ( spell$.Go.HasComponent( "spell_mass_enchant" ) == true ) {
        slot_descr$ = spell$.Go.getComponentString( "spell_mass_enchant", "description" );
        return;
      }
      if ( spell$.Go.HasComponent( "spell_summon" ) == true ) {
        slot_descr$ = spell$.Go.getComponentString( "spell_summon", "caster_description" );
        return;
      }
      if ( spell$.Go.HasComponent( "spell_charm" ) == true ) {
        slot_descr$ = spell$.Go.getComponentString( "spell_charm", "caster_description" );
        return;
      }
      if ( spell$.Go.HasComponent( "spell_turret" ) == true ) {
        slot_descr$ = spell$.Go.getComponentString( "spell_turret", "description" );
        return;
      }
      // all below are for LoA
      if ( spell$.Go.HasComponent( "spell_invisibility" ) == true ) {
        slot_descr$ = spell$.Go.getComponentString( "spell_invisibility", "state_description" );
        return;
      }
      if ( spell$.Go.HasComponent( "spell_magnet" ) == true ) {
        slot_descr$ = spell$.Go.getComponentString( "spell_magnet", "caster_description" );
        return;
      }
      if ( spell$.Go.HasComponent( "spell_orb" ) == true ) {
        slot_descr$ = spell$.Go.getComponentString( "spell_orb", "casterDescription" );
        return;
      }
      if ( spell$.Go.HasComponent( "spell_purity" ) == true ) {
        slot_descr$ = spell$.Go.getComponentString( "spell_purity", "description" );
        return;
      }
      if ( spell$.Go.HasComponent( "spell_respite" ) == true ) {
        slot_descr$ = spell$.Go.getComponentString( "spell_respite", "state_description" );
        return;
      }
      if ( spell$.Go.HasComponent( "spell_share_damage" ) == true ) {
        slot_descr$ = spell$.Go.getComponentString( "spell_share_damage", "description" );
        return;
      }
      if ( spell$.Go.HasComponent( "spell_speed_affector" ) == true ) {
        slot_descr$ = spell$.Go.getComponentString( "spell_speed_affector", "description" );
        return;
      }
      if ( spell$.Go.HasComponent( "spell_summon_clone" ) == true ) {
        slot_descr$ = spell$.Go.getComponentString( "spell_summon_clone", "caster_description" );
        return;
      }
      if ( spell$.Go.HasComponent( "spell_transference" ) == true ) {
        slot_descr$ = spell$.Go.getComponentString( "spell_transference", "caster_description" );
        return;
      }
      if ( spell$.Go.HasComponent( "spell_transformation" ) == true ) {
        slot_descr$ = spell$.Go.getComponentString( "spell_transformation", "description" );
        return;
      }
    }
  }

  //
  // fills variables from active buff slot i$ (if not empty)
  //
  bool my_Get_ActBuff$( int i$ )
  {
    int    myTimeEnd$ = 0;
    string myVarA$ = MakeStringF( "%s_%d_A%d", myVarPrefix$, MakeInt(hero_GoID$), i$ );
    string myVarB$ = MakeStringF( "%s_%d_B%d", myVarPrefix$, MakeInt(hero_GoID$), i$ );

    // get the slot's on/off status
    slot_on$ = GameAuditor.GetDb.GetBool(myVarA$);
    // if there's an active buff here, fill the variables
    if ( slot_on$ == true )
    {
      slot_GoID$ = MakeGoID( GameAuditor.GetDb.GetInt(myVarA$) );
      myTimeEnd$ = GameAuditor.GetDb.GetInt(myVarB$);
      slot_time$ = Math.Round( Math.ToFloat( myTimeEnd$ / 100 ) - WorldTime.Time );
      my_Find_Buff_Descr$( slot_GoID$ );
    // else put nulls in them
    }
    else
    {
      slot_GoID$ = null;
      slot_time$ = 0;
      slot_descr$ = "";
    }
    return slot_on$;
  }

  //
  // fills the GUI panel with values
  //
  void my_Fill_Values$( void )
  {
    // prepare some window handles
    UIText    myTitleI$    = QueryDerivedText(    UIShell.FindUIWindow( "i_title", "Lokiswaq_BufUI") );
    UIText    myTitleT$    = QueryDerivedText(    UIShell.FindUIWindow( "t_title", "Lokiswaq_BufUI") );
    UITextBox myBuffsList$ = QueryDerivedTextBox( UIShell.FindUIWindow( "t_buffs", "Lokiswaq_BufUI") );
    UITextBox myTimesList$ = QueryDerivedTextBox( UIShell.FindUIWindow( "t_times", "Lokiswaq_BufUI") );
    UIWindow  w_icon$;
    UITextBox w_time$;

    // This is the simplest way to get the selected character!
    // It is stored globally for other functions to use it.
    hero_GoID$ = GoDB.GetFocusGo;

    // better safe than sorry :)
    if ( !hero_GoID$.IsValid() )
    {
      myTitleI$.SetText( "oops! null hero", true );
      myTitleT$.SetText( "oops! null hero", true );
      return;
    }

    // get active buffs counter for the hero
    string myVarCount$ = MakeStringF( "%s_%d", myVarPrefix$, MakeInt(hero_GoID$) );
    int    buff_count$ = GameAuditor.GetDB.GetInt( myVarCount$ );

    // display title with hero's name and buffs count
    string tmp$ = "";
    string suffix$ = "";

    hero_GoID$.Go.Common.GetScreenName( tmp$ );

    suffix$ = StringTool.Right( tmp$, 1 );
    StringTool.AppendF( tmp$, "'%s active buffs", ((suffix$=="s" || suffix$=="S") ? "" : "s") );
    if ( buff_count$ > 0 )
    {
      StringTool.AppendF( tmp$, " (%d)", buff_count$ );
    }
    myTitleI$.SetText( tmp$, true );
    myTitleT$.SetText( tmp$, true );

    // display buffs and times
    int slot$ = 0;
    int max_slots$ = 20;  // these are the maximum saved states
    int line$ = 0;
    int max_lines$ = 12;  // the maximum displayed buffs
    int time_hrs$ = 0;
    int time_min$ = 0;
    int time_sec$ = 0;
    string s_hrs$ = "";
    string s_min$ = "";
    string s_sec$ = "";
    string s_hms$ = "";

    // display as many slots as possible
    while ( slot$ < max_slots$ )             // for each slot
    {
      if ( my_Get_ActBuff$( slot$ ) == true) // if slot not empty
      {
        if ( slot_goid$.IsValid() )          // if slot valid
        {
          if ( line$ < max_lines$ )          // if will fit on screen
          {
            // prepare temporary window handles
            w_icon$ =                      UIShell.FindUIWindow( MakeStringF( "i_icon%d", line$), "Lokiswaq_BufUI" );
            w_time$ = QueryDerivedTextBox( UIShell.FindUIWindow( MakeStringF( "i_time%d", line$), "Lokiswaq_BufUI" ) );

            // break buff time to h:mm:ss
            time_hrs$ = slot_time$ / 3600;
            time_min$ = (slot_time$ - time_hrs$ * 3600) / 60;
            time_sec$ = slot_time$ % 60;

            // update text panel
            if ( slot_time$ > -1 )  // sync problems may show time as -1", so avoid it ;)
            {
              s_hrs$ = MakeStringF( "%d", time_hrs$ );
              s_min$ = MakeStringF( "%s", StringTool.Right( MakeStringF((time_hrs$>0?  "0%d":" %d"),time_min$), 2) );
              s_sec$ = MakeStringF( "%s", StringTool.Right( MakeStringF((slot_time$>59?"0%d":" %d"),time_sec$), 2) );
              s_hms$ = MakeStringF( " %s:%s:%s", s_hrs$, s_min$, s_sec$ );
              s_hms$ = StringTool.Right( s_hms$, ( time_hrs$>0 ? 8 : ( slot_time$>59 ? 5 : 2 ) ) );
            }
            else
            {
              s_sec$ = "0";
              s_hms$ = "0";
            }
            myTimesList$.SetLineText( line$, s_hms$, ( slot_time$ > 10 ? 0xFF4999FF : 0xFFFF0000 ) );
            myBuffsList$.SetLineText( line$, slot_descr$, 0xFFFFFFFF );

            // update icon panel
            w_icon$.LoadTexture( slot_goid$.go.gui.activeicon, false );
            // break buff time to mm:ss (or 99:++ if overflow)
            if ( slot_time$ > 5999 )
            {
              w_time$.SetLineText(0,"99",0xFF4999FF);
              w_time$.SetLineText(1,"++",0xFF4999FF);
            }
            else
            {
              time_min$ = slot_time$ / 60; // turn hours to minutes
              s_min$ = ""; if ( time_min$ > 0 ) { s_min$ = MakeStringF("%d",time_min$); }
              w_time$.SetLineText(0,s_min$,0xFF4999FF);
              w_time$.SetLineText(1,s_sec$,(slot_time$>10?0xFF4999FF:0xFFFF0000));
            }
            // advance one line
            line$ += 1;
          }
        }
      }
      // advance one slot
      slot$ += 1;
    }

    // fill rest with blanks
    while ( line$ < max_lines$ )
    {
      // prepare temporary window handles
      w_icon$ =                      UIShell.FindUIWindow( MakeStringF( "i_icon%d", line$), "Lokiswaq_BufUI" );
      w_time$ = QueryDerivedTextBox( UIShell.FindUIWindow( MakeStringF( "i_time%d", line$), "Lokiswaq_BufUI" ) );

      // update text panel
      myBuffsList$.SetLineText( line$, "", 0xFFFFFFFF );
      myTimesList$.SetLineText( line$, "", 0xFFFFFFFF );

      // update icon panel
      w_icon$.LoadTexture( "b_gui_ig_mnu_bufui_empty", false );
      w_time$.SetLineText(0,"",0xFFFFFFFF);
      w_time$.SetLineText(1,"",0xFFFFFFFF);

      // advance one line
      line$ += 1;
    }

  }

  ]];

  // GUI hidden control widget
  [t:dialog_box,n:main]
  {
    f alpha = 0.0;
    b common_control = false;
    i draw_order = 1;
    is_bottom_anchor = true
    bottom_anchor = 306;
    rect = 5,294,5,294; // 1-pixel(!)
    visible = false;
    pass_through = true;
    group = Lokiswaq_BufUI;
    [messages]
    {
      onstartanim = call( my_Fill_Values$ );
    }
  }
  // Text panel background
  [t:dialog_box,n:t_background]
  {
    f alpha = 0.700000;                   // transparency (1.0 is opaque)
    b common_control = true;              // uses predefined template?
    common_template = cpbox;              // which template?
    i draw_order = 5;                     // draw order
    is_bottom_anchor = true;              // bottom anchored
    bottom_anchor = 208;                  // distance from bottom of screen
    rect = 5,392,179,557;                 // left, top, right, bottom
    //texture = ;                         // image or "none"
    //uvcoords = 0.0, 0.0, 1.0, 1.0;      // region of texture to be used (left,bottom,right,top)
    wrap_mode = clamp;                    // textures tiling
    pass_through = true;                  // can player click under?
    visible = false;                      // will be visible when created?
    group = Lokiswaq_BufUI_text;          // used with UIShell.ShiftGroup for moving parts of interface
  }
  // Text panel title
  [t:text,n:t_title]
  {
    f alpha = 0.700000;
    b common_control = false;
    common_template = ;
    draw_order = 10;
    is_bottom_anchor = true;
    bottom_anchor = 206;
    rect = 10,394,174,407;
    font_color = 0xFF00FF40;
    font_size = 11;
    font_type = b_gui_fnt_11p_chat;
    text = "something went wrong :(";
    wrap_mode = clamp;
    pass_through = true;
    visible = false;
    group = Lokiswaq_BufUI_text;
  }
  // Text panel countdowns
  [t:text_box,n:t_times]
  {
    f alpha = 0.700000;
    b common_control = false;
    common_template = ;
    draw_order = 11;
    b center_height = false;
    b fixed_location = true;
    is_bottom_anchor = true;
    bottom_anchor = 194;
    rect = 10,406,48,555;
    font_color = -1;
    font_size = 11;
    font_type = b_gui_fnt_11p_chat;
    justify = right;
    show_first_line = false;
    wrap_mode = clamp;
    pass_through = true;
    x text_color = -1;
    visible = false;
    group = Lokiswaq_BufUI_text;
  }
  // Text panel buffs list
  [t:text_box,n:t_buffs]
  {
    f alpha = 0.700000;
    b common_control = false;
    common_template = ;
    draw_order = 12;
    b center_height = false;
    b fixed_location = true;
    is_bottom_anchor = true;
    bottom_anchor = 194;
    rect = 52,406,174,555;
    font_color = -1;
    font_size = 11;
    font_type = b_gui_fnt_11p_chat;
    justify = left;
    show_first_line = false;
    wrap_mode = clamp;
    pass_through = true;
    x text_color = -1;
    visible = false;
    group = Lokiswaq_BufUI_text;
  }
  //
  //
  // Icons panel background artwork
  [t:window,n:i_background]
  {
    alpha = 0.700000;
    common_control = false;
    draw_order = 21;
    b fixed_location = true;
    is_bottom_anchor = true;
    bottom_anchor = 130;
    rect = 1,470,229,562;
    texture = b_gui_ig_mnu_bufui;
    uvcoords = 0.0,0.0,0.890625,0.71875;
    wrap_mode = clamp;
    pass_through = true;
    group = Lokiswaq_BufUI_icons;
  }
  // Icons panel title
  [t:text,n:i_title]
  {
    f alpha = 0.700000;
    b common_control = false;
    common_template = ;
    draw_order = 22;
    is_bottom_anchor = true;
    bottom_anchor = 123;
    rect = 11,477,231,489;
    font_color = 0xFF00FF40;
    font_size = 11;
    font_type = b_gui_fnt_11p_chat;
    text = "something went wrong :(";
    wrap_mode = clamp;
    pass_through = true;
    group = Lokiswaq_BufUI_icons;
  }
  // icon 0
  [t:window,n:i_icon0]
  {
    alpha = 0.800000;
    common_control = false;
    draw_order = 31;
    b fixed_location = true;
    is_bottom_anchor = true;
    bottom_anchor = 106;
    rect = 8,494,23,525;
    texture = b_gui_ig_mnu_bufui_empty;
    uvcoords = 0.0,0.0,1.0,1.0;
    wrap_mode = clamp;
    pass_through = true;
    group = Lokiswaq_BufUI_icons;
  }
  // icon 0 time
  [t:text_box,n:i_time0]
  {
    f alpha = 0.700000;
    b common_control = false;
    draw_order = 32;
    b center_height = false;
    b fixed_location = true;
    is_bottom_anchor = true;
    bottom_anchor = 71;
    rect = 8,529,23,555;
    show_first_line = false;
    font_color = -1;
    font_size = 11;
    font_type = b_gui_fnt_11p_chat;
    justify = right;
    pass_through = true;
    group = Lokiswaq_BufUI_icons;
  }
  [t:window,n:i_icon1]
  {
    alpha = 0.800000;
    common_control = false;
    draw_order = 33;
    b fixed_location = true;
    is_bottom_anchor = true;
    bottom_anchor = 106;
    rect = 26,494,41,525;
    texture = b_gui_ig_mnu_bufui_empty;
    uvcoords = 0.0,0.0,1.0,1.0;
    wrap_mode = clamp;
    pass_through = true;
    group = Lokiswaq_BufUI_icons;
  }
  [t:text_box,n:i_time1]
  {
    f alpha = 0.700000;
    b common_control = false;
    draw_order = 34;
    b center_height = false;
    b fixed_location = true;
    is_bottom_anchor = true;
    bottom_anchor = 71;
    rect = 26,529,41,555;
    show_first_line = false;
    font_color = -1;
    font_size = 11;
    font_type = b_gui_fnt_11p_chat;
    justify = right;
    pass_through = true;
    group = Lokiswaq_BufUI_icons;
  }
  [t:window,n:i_icon2]
  {
    alpha = 0.800000;
    common_control = false;
    draw_order = 33;
    b fixed_location = true;
    is_bottom_anchor = true;
    bottom_anchor = 106;
    rect = 44,494,59,525;
    texture = b_gui_ig_mnu_bufui_empty;
    uvcoords = 0.0,0.0,1.0,1.0;
    wrap_mode = clamp;
    pass_through = true;
    group = Lokiswaq_BufUI_icons;
  }
  [t:text_box,n:i_time2]
  {
    f alpha = 0.700000;
    b common_control = false;
    draw_order = 34;
    b center_height = false;
    b fixed_location = true;
    is_bottom_anchor = true;
    bottom_anchor = 71;
    rect = 44,529,59,555;
    show_first_line = false;
    font_color = -1;
    font_size = 11;
    font_type = b_gui_fnt_11p_chat;
    justify = right;
    pass_through = true;
    group = Lokiswaq_BufUI_icons;
  }
  [t:window,n:i_icon3]
  {
    alpha = 0.800000;
    common_control = false;
    draw_order = 35;
    b fixed_location = true;
    is_bottom_anchor = true;
    bottom_anchor = 106;
    rect = 62,494,77,525;
    texture = b_gui_ig_mnu_bufui_empty;
    uvcoords = 0.0,0.0,1.0,1.0;
    wrap_mode = clamp;
    pass_through = true;
    group = Lokiswaq_BufUI_icons;
  }
  [t:text_box,n:i_time3]
  {
    f alpha = 0.700000;
    b common_control = false;
    draw_order = 36;
    b center_height = false;
    b fixed_location = true;
    is_bottom_anchor = true;
    bottom_anchor = 71;
    rect = 62,529,77,555;
    show_first_line = false;
    font_color = -1;
    font_size = 11;
    font_type = b_gui_fnt_11p_chat;
    justify = right;
    pass_through = true;
    group = Lokiswaq_BufUI_icons;
  }
  [t:window,n:i_icon4]
  {
    alpha = 0.800000;
    common_control = false;
    draw_order = 37;
    b fixed_location = true;
    is_bottom_anchor = true;
    bottom_anchor = 106;
    rect = 80,494,95,525;
    texture = b_gui_ig_mnu_bufui_empty;
    uvcoords = 0.0,0.0,1.0,1.0;
    wrap_mode = clamp;
    pass_through = true;
    group = Lokiswaq_BufUI_icons;
  }
  [t:text_box,n:i_time4]
  {
    f alpha = 0.700000;
    b common_control = false;
    draw_order = 38;
    b center_height = false;
    b fixed_location = true;
    is_bottom_anchor = true;
    bottom_anchor = 71;
    rect = 80,529,95,555;
    show_first_line = false;
    font_color = -1;
    font_size = 11;
    font_type = b_gui_fnt_11p_chat;
    justify = right;
    pass_through = true;
    group = Lokiswaq_BufUI_icons;
  }
  [t:window,n:i_icon5]
  {
    alpha = 0.800000;
    common_control = false;
    draw_order = 39;
    b fixed_location = true;
    is_bottom_anchor = true;
    bottom_anchor = 106;
    rect = 98,494,113,525;
    texture = b_gui_ig_mnu_bufui_empty;
    uvcoords = 0.0,0.0,1.0,1.0;
    wrap_mode = clamp;
    pass_through = true;
    group = Lokiswaq_BufUI_icons;
  }
  [t:text_box,n:i_time5]
  {
    f alpha = 0.700000;
    b common_control = false;
    draw_order = 40;
    b center_height = false;
    b fixed_location = true;
    is_bottom_anchor = true;
    bottom_anchor = 71;
    rect = 98,529,113,555;
    show_first_line = false;
    font_color = -1;
    font_size = 11;
    font_type = b_gui_fnt_11p_chat;
    justify = right;
    pass_through = true;
    group = Lokiswaq_BufUI_icons;
  }
  [t:window,n:i_icon6]
  {
    alpha = 0.800000;
    common_control = false;
    draw_order = 39;
    b fixed_location = true;
    is_bottom_anchor = true;
    bottom_anchor = 106;
    rect = 116,494,131,525;
    texture = b_gui_ig_mnu_bufui_empty;
    uvcoords = 0.0,0.0,1.0,1.0;
    wrap_mode = clamp;
    pass_through = true;
    group = Lokiswaq_BufUI_icons;
  }
  [t:text_box,n:i_time6]
  {
    f alpha = 0.700000;
    b common_control = false;
    draw_order = 40;
    b center_height = false;
    b fixed_location = true;
    is_bottom_anchor = true;
    bottom_anchor = 71;
    rect = 116,529,131,555;
    show_first_line = false;
    font_color = -1;
    font_size = 11;
    font_type = b_gui_fnt_11p_chat;
    justify = right;
    pass_through = true;
    group = Lokiswaq_BufUI_icons;
  }
  [t:window,n:i_icon7]
  {
    alpha = 0.800000;
    common_control = false;
    draw_order = 39;
    b fixed_location = true;
    is_bottom_anchor = true;
    bottom_anchor = 106;
    rect = 134,494,149,525;
    texture = b_gui_ig_mnu_bufui_empty;
    uvcoords = 0.0,0.0,1.0,1.0;
    wrap_mode = clamp;
    pass_through = true;
    group = Lokiswaq_BufUI_icons;
  }
  [t:text_box,n:i_time7]
  {
    f alpha = 0.700000;
    b common_control = false;
    draw_order = 40;
    b center_height = false;
    b fixed_location = true;
    is_bottom_anchor = true;
    bottom_anchor = 71;
    rect = 134,529,149,555;
    show_first_line = false;
    font_color = -1;
    font_size = 11;
    font_type = b_gui_fnt_11p_chat;
    justify = right;
    pass_through = true;
    group = Lokiswaq_BufUI_icons;
  }
  [t:window,n:i_icon8]
  {
    alpha = 0.800000;
    common_control = false;
    draw_order = 39;
    b fixed_location = true;
    is_bottom_anchor = true;
    bottom_anchor = 106;
    rect = 152,494,167,525;
    texture = b_gui_ig_mnu_bufui_empty;
    uvcoords = 0.0,0.0,1.0,1.0;
    wrap_mode = clamp;
    pass_through = true;
    group = Lokiswaq_BufUI_icons;
  }
  [t:text_box,n:i_time8]
  {
    f alpha = 0.700000;
    b common_control = false;
    draw_order = 40;
    b center_height = false;
    b fixed_location = true;
    is_bottom_anchor = true;
    bottom_anchor = 71;
    rect = 152,529,167,555;
    show_first_line = false;
    font_color = -1;
    font_size = 11;
    font_type = b_gui_fnt_11p_chat;
    justify = right;
    pass_through = true;
    group = Lokiswaq_BufUI_icons;
  }
  [t:window,n:i_icon9]
  {
    alpha = 0.800000;
    common_control = false;
    draw_order = 39;
    b fixed_location = true;
    is_bottom_anchor = true;
    bottom_anchor = 106;
    rect = 170,494,185,525;
    texture = b_gui_ig_mnu_bufui_empty;
    uvcoords = 0.0,0.0,1.0,1.0;
    wrap_mode = clamp;
    pass_through = true;
    group = Lokiswaq_BufUI_icons;
  }
  [t:text_box,n:i_time9]
  {
    f alpha = 0.700000;
    b common_control = false;
    draw_order = 40;
    b center_height = false;
    b fixed_location = true;
    is_bottom_anchor = true;
    bottom_anchor = 71;
    rect = 170,529,185,555;
    show_first_line = false;
    font_color = -1;
    font_size = 11;
    font_type = b_gui_fnt_11p_chat;
    justify = right;
    pass_through = true;
    group = Lokiswaq_BufUI_icons;
  }
  [t:window,n:i_icon10]
  {
    alpha = 0.800000;
    common_control = false;
    draw_order = 39;
    b fixed_location = true;
    is_bottom_anchor = true;
    bottom_anchor = 106;
    rect = 188,494,203,525;
    texture = b_gui_ig_mnu_bufui_empty;
    uvcoords = 0.0,0.0,1.0,1.0;
    wrap_mode = clamp;
    pass_through = true;
    group = Lokiswaq_BufUI_icons;
  }
  [t:text_box,n:i_time10]
  {
    f alpha = 0.700000;
    b common_control = false;
    draw_order = 40;
    b center_height = false;
    b fixed_location = true;
    is_bottom_anchor = true;
    bottom_anchor = 71;
    rect = 188,529,203,555;
    show_first_line = false;
    font_color = -1;
    font_size = 11;
    font_type = b_gui_fnt_11p_chat;
    justify = right;
    pass_through = true;
    group = Lokiswaq_BufUI_icons;
  }
  [t:window,n:i_icon11]
  {
    alpha = 0.800000;
    common_control = false;
    draw_order = 39;
    b fixed_location = true;
    is_bottom_anchor = true;
    bottom_anchor = 106;
    rect = 206,494,221,525;
    texture = b_gui_ig_mnu_bufui_empty;
    uvcoords = 0.0,0.0,1.0,1.0;
    wrap_mode = clamp;
    pass_through = true;
    group = Lokiswaq_BufUI_icons;
  }
  [t:text_box,n:i_time11]
  {
    f alpha = 0.700000;
    b common_control = false;
    draw_order = 40;
    b center_height = false;
    b fixed_location = true;
    is_bottom_anchor = true;
    bottom_anchor = 71;
    rect = 206,529,221,555;
    show_first_line = false;
    font_color = -1;
    font_size = 11;
    font_type = b_gui_fnt_11p_chat;
    justify = right;
    pass_through = true;
    group = Lokiswaq_BufUI_icons;
  }
}