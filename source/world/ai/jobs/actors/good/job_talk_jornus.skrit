/*
  ============================================================================
  ----------------------------------------------------------------------------

	File		: 	job_talk_jornus.skrit

	Author(s)	: 	David Tomandl, Bartosz Kijanka, Chad Queen

	Purpose		: 	Talk job for Jornus, the man with the scythe.

	(C)opyright 2001 Gas Powered Games, Inc.

  ----------------------------------------------------------------------------
  ============================================================================
*/

Go			m_Go$;
GoMind		m_Mind$;
GoBody  	m_Body$;
Job			m_Job$;
Goid		m_Target$;

#include "k_job_c_mcp_fidget_utils"
#include "k_job_c_talk_utils"

startup state STARTUP$
{
}

////////////////////////////////////////////////////////////////////////////////
//	init

event OnJobInit$( Job job$ )
{
	m_Job$		= job$;
	m_Go$		= job$.Go;
	m_Mind$		= job$.Go.Mind;
	m_Body$		= job$.Go.Body;
	m_Target$	= job$.GoalObject;

	SetState Face$;
}


////////////////////////////////////////////////////////////////////////////////
//	face the audience
state Face$
{
	transition
	{
		-> Talk$:	OnWorldMessage( WE_MCP_FACING_LOCKEDON );
	}

	event OnEnterState$
	{
		if( !m_Go$.HasConversation )
		{
			report.errorf( "Actor '%s', scid:0x%08x was told to run job_talk but he doesn't have a conversation component.",
							m_Go$.GetTemplateName,
							m_Go$.Goid );
			SetState Exiting$;
		}
		MCPManager.MakeRequest( m_Go$.Goid, PL_FACE, m_Target$ );
	}
}


////////////////////////////////////////////////////////////////////////////////
//	blab blab away... pretend you're Lee
state Talk$
{
	transition
	{
		-> Exiting$:	OnWorldMessage( WE_REQ_TALK_END ) =
		{
			if( m_Go$.Mind.ActorAutoFidgets )
			{
				StartFidgetIfRequired$();
			}
		}
	}
	
	trigger OnWorldMessage$( WE_ANIM_DONE )
	{
		TryAnim$('talk');
	}

	event OnEnterState$
	{
		#only( game )
		[[
			if ( Goid.InValidGoid != UIPartyManager.DoesActivePartyHaveTemplate( "scythe_jornus", m_Target$ )) ||
				( Victory.IsQuestCompleted( "quest_jornus_scythe" )) )
			{
				if ( !GameAuditor.GetDb.GetBool( "jornus_gave_reward" ) )
				{
					// Delete the scythe
					goid temp_scythe$ = UIPartyManager.DoesActivePartyHaveTemplate( "scythe_jornus", m_Target$ );
					temp_scythe$.Go.Parent.Mind.SDoJob( MakeJobReq( JAT_DROP, JQ_ACTION, QP_FRONT, AO_REFLEX, temp_scythe$ ) );
					PostWorldMessage( WE_REQ_DELETE, temp_scythe$, temp_scythe$, .1 );

					// Give the reward
					GameAuditor.GetDb.SetBool( "jornus_gave_reward", true );
					SiegePos SpawnPos$;
					GoCloneReq cloneReq$ = MakeGoCloneReq( "book_glb_placeholder" );
					
					SpawnPos$ = m_Target$.go.placement.position;
					cloneReq$.StartingPos	= SpawnPos$;
				    
					If( m_Target$.Go.Hasmind )
					{
						if( AIQuery.FindSpotRelativeToSource( m_Target$.Go, 1, 1.5, 2.0, m_Target$.Go.Mind.TempPos1 ) )
				   		{
							cloneReq$.StartingPos = m_Target$.Go.Mind.TempPos1;
				   		}
				   	}	
					cloneReq$.SnapToTerrain = true;
					GoDb.SCloneGo( cloneReq$ );
				}

				m_Go$.GetConversation.RSSelectConversation( "conversation_jornus_quest_complete" );
				TryAnim$('talk');
			}
			else
			{
				m_Go$.GetConversation.RSSelectConversation( "conversation_jornus" );
				TryAnim$('talk');
			}
		]]
		m_Go$.GetConversation.RSActivateDialogue();
	}
}


////////////////////////////////////////////////////////////////////////////////
//	finish blabbing
state Exiting$
{
	event OnEnterState$
	{
		// Send a PL_FACE reguest without a target so that they no longer
		// continue to face the character they were talking to
		MCPManager.MakeRequest( m_Go$.Goid, PL_FACE );

		m_Job$.MarkForDeletion();
	}
}

