/*
  ============================================================================
  ----------------------------------------------------------------------------

	File		: 	job_talk_ferdl.skrit

	Author(s)	: 	David Tomandl, Eric Tams, Chad Queen, Bartosz Kijanka

	Purpose		: 	Custom talk job for Ferdl, another multiplayer world quest guy.

	(C)opyright 2001 Gas Powered Games, Inc.

  ----------------------------------------------------------------------------
  ============================================================================
*/

Go		m_Go$;
GoMind	m_Mind$;
GoBody  m_Body$;
Job		m_Job$;
Goid	m_Target$;

#include "k_job_c_mcp_fidget_utils"
#include "k_job_c_talk_utils"

startup state STARTUP$
{
}

////////////////////////////////////////////////////////////////////////////////
//	init
event OnJobInitPointers$( Job job$ )
{
	m_Job$		= job$;
	m_Go$		= job$.Go;
	m_Mind$		= job$.Go.Mind;
	m_Body$		= job$.Go.Body;
}

event OnJobInit$( Job job$ )
{
	OnJobInitPointers$( job$ );

	m_Target$	= job$.GoalObject;

	SetState Talk$;
}

////////////////////////////////////////////////////////////////////////////////
//	blab blab away... pretend you're Lee on coffee
state Talk$
{
	transition
	{
		-> Exiting$:	OnWorldMessage( WE_REQ_TALK_END ) =
		{
			if( m_Go$.Mind.ActorAutoFidgets )
			{
				StartFidgetIfRequired$();
			}
		}
		-> Exiting$:	OnWorldMessage( WE_ANIM_DONE ) =
		{
			if( m_Go$.Mind.ActorAutoFidgets )
			{
				StartFidgetIfRequired$();
			}
		}
	}

	event OnEnterState$
	{
		#only( game )
		[[
			if ( GameAuditor.GetDb.GetBool( "d_0x0070087f" ) )
			{
				m_Go$.GetConversation.RSSelectConversation( "zconversation_directions" );
				GameAuditor.GetDb.SetBool( "d_0x0070087f", false );
			}
			else if ( GameAuditor.GetDb.GetBool( "turn_world_red" ) ) {
				m_Go$.GetConversation.RSSelectConversation( "conversation_ferdl_red" );
			} 
			else if ( Victory.IsQuestCompleted( "quest_townstones" )) {
				m_Go$.GetConversation.RSSelectConversation( "conversation_ferdl_all_complete" );
			}
			else if ( Goid.InValidGoid == UIPartyManager.DoesActivePartyHaveTemplate( "ring_utraean", m_Target$ ))
			{
				m_Go$.GetConversation.RSSelectConversation( "conversation_ferdl" );
			}
			else if ( Victory.IsQuestActive( "goto_hiroth" ))
			{
				m_Go$.GetConversation.RSSelectConversation( "conversation_ferdl_goto" );
			}
			else if ( Goid.InValidGoid != UIPartyManager.DoesActivePartyHaveTemplate( "stone_glb_quillrabe_01", m_Target$ ))
			{
				if ( !GameAuditor.GetDb.GetBool( "ferdl_gave_reward" ) )
				{
					GameAuditor.GetDb.SetBool( "ferdl_gave_reward", true );

					DumpMain$; // drop loot
				}
				if ( Victory.IsQuestActive( "quest_quillrabe" ))
				{
					m_Go$.GetConversation.RSSelectConversation( "conversation_ferdl_complete" );
				}
				else
				{
					m_Go$.GetConversation.RSSelectConversation( "conversation_ferdl_stone" );
				}
			}
			else
			{
				if ( Victory.IsQuestActive( "quest_quillrabe" ))
				{
					m_Go$.GetConversation.RSSelectConversation( "conversation_ferdl_quest" );
				}
				else
				{
					m_Go$.GetConversation.RSSelectConversation( "conversation_ferdl_ring" );
				}
			}
			if( m_Go$.Mind.ActorAutoFidgets )
			{
				StartFidgetIfRequired$();
			}
			m_Go$.GetConversation.RSActivateDialogue();
		]]
	}
}


////////////////////////////////////////////////////////////////////////////////
//	finish blabbing
state Exiting$
{
	event OnEnterState$
	{
		m_Job$.MarkForDeletion();
	}
}
