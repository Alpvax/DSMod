/*
  ============================================================================
  ----------------------------------------------------------------------------

	File		: 	job_talk.skrit

	Author(s)	: 	Bartosz Kijanka

	Purpose		: 	Just stand there and talk at anyone we're told to.

	(C)opyright 2000 Gas Powered Games, Inc.

  ----------------------------------------------------------------------------
  ============================================================================
*/

Go			m_Go$;
GoMind		m_Mind$;
GoBody  	m_Body$;
Job			m_Job$;
Goid		m_Target$;

#include "k_job_c_mcp_fidget_utils"
#include "k_job_c_talk_utils"

startup state STARTUP$
{
}

////////////////////////////////////////////////////////////////////////////////
//	init
event OnJobInitPointers$( Job job$ )
{
	m_Job$		= job$;
	m_Go$		= job$.Go;
	m_Mind$		= job$.Go.Mind;
	m_Body$		= job$.Go.Body;
}


event OnJobInit$( Job job$ )
{
	OnJobInitPointers$( job$ );

	m_Target$	= job$.GoalObject;

	SetState Face$;
}


////////////////////////////////////////////////////////////////////////////////
//	face the audience
state Face$
{
	transition
	{
		-> Talk$:	OnWorldMessage( WE_MCP_FACING_LOCKEDON );
	}

	event OnEnterState$
	{
		if( !m_Go$.HasConversation )
		{
			report.errorf( "Actor '%s', scid:0x%08x was told to run job_talk but he doesn't have a conversation component.",
							m_Go$.GetTemplateName,
							m_Go$.Goid );
			SetState Exiting$;
		}
		MCPManager.MakeRequest( m_Go$.Goid, PL_FACE, m_Target$ );
	}
}


////////////////////////////////////////////////////////////////////////////////
//	blab blab away... pretend you're Lee
state Talk$
{
	transition
	{
		-> Exiting$:	OnWorldMessage( WE_REQ_TALK_END ) =
		{
			if( m_Go$.Mind.ActorAutoFidgets )
			{
				StartFidgetIfRequired$();
			}
		}
	}
	
	trigger OnWorldMessage$( WE_ANIM_DONE )
	{
		TryAnim$('talk');
	}

	event OnEnterState$
	{
		// $$$ read/write variables from the Game Auditor here, and bring up the appropriate dialogs...
		m_Go$.GetConversation.RSSelectConversation( "conversation_lord_bolingar_join" );

		if ( GameAuditor.GetDb.GetBool( "party_accept_0x4600072" ) )
		{
//			report.generic( "Huh?  how the hell...?\n" );
			m_Go$.GetConversation.RSSelectConversation( "conversation_lord_bolingar_accept" );
			GameAuditor.GetDb.SetBool( "party_accept_0x4600072", false );
			TryAnim$('lblg');
		} 
		else if ( GameAuditor.GetDb.GetBool( "party_decline_0x4600072" ) )
		{
			m_Go$.GetConversation.RSSelectConversation( "conversation_lord_bolingar_reject" );
			GameAuditor.GetDb.SetBool( "party_decline_0x4600072", false );
			GameAuditor.GetDb.SetBool( "party_allow_rejoin_0x4600072", true );
			TryAnim$('lblg');
		}
		else if ( GameAuditor.GetDb.GetBool( "party_disband_0x4600072" ) )
		{
			m_Go$.GetConversation.RSSelectConversation( "conversation_lord_bolingar_disband" );
			GameAuditor.GetDb.SetBool( "party_disband_0x4600072", false );
			GameAuditor.GetDb.SetBool( "party_disbanded_0x4600072", true );
			TryAnim$('lblg');
		}
		else if ( GameAuditor.GetDb.GetBool( "party_disbanded_0x4600072" ) )
		{
			if ( GameAuditor.GetDb.GetBool( "met_king" ) )
			{
				m_Go$.GetConversation.RSSelectConversation( "conversation_lord_bolingar_disband_rejoin_found_king" );	
				TryAnim$('lblg');		
			}
			else
			{
				m_Go$.GetConversation.RSSelectConversation( "conversation_lord_bolingar_disband_rejoin_no_king" );
				TryAnim$('lblg');
			}			
		} 
		else if ( GameAuditor.GetDb.GetBool( "party_allow_rejoin_0x4600072" ) )
		{			
			m_Go$.GetConversation.RSSelectConversation( "conversation_lord_bolingar_rejoin" );
			GameAuditor.GetDb.SetBool( "party_allow_rejoin_0x4600072", false );
			TryAnim$('lblg');
		}		
		else 
		{
			TryAnim$('lblg');
		}

		m_Go$.GetConversation.RSActivateDialogue();
	}
}


////////////////////////////////////////////////////////////////////////////////
//	finish blabbing
state Exiting$
{
	event OnEnterState$
	{
		// $$$ close up any dialogs here...

		// Send a PL_FACE reguest without a target so that they no longer
		// continue to face the character they were talking to
		MCPManager.MakeRequest( m_Go$.Goid, PL_FACE );

		m_Job$.MarkForDeletion();
	}
}


