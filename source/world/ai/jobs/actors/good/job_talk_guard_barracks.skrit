/*
  ============================================================================
  ----------------------------------------------------------------------------

	File		: 	job_talk_guard_barracks.skrit

	Author(s)	: 	David Tomandl, Eric Tams, Chad Queen, Bartosz Kijanka

	Purpose		: 	Custom talk job for a guard who gives you a reward
					for finishing the barracks quest.

	(C)opyright 2001 Gas Powered Games, Inc.

  ----------------------------------------------------------------------------
  ============================================================================
*/

Go		m_Go$;
GoMind	m_Mind$;
GoBody  m_Body$;
Job		m_Job$;
Goid	m_Target$;

#include "k_job_c_mcp_fidget_utils"
#include "k_job_c_talk_utils"

startup state STARTUP$
{
}

////////////////////////////////////////////////////////////////////////////////
//	init
event OnJobInitPointers$( Job job$ )
{
	m_Job$		= job$;
	m_Go$		= job$.Go;
	m_Mind$		= job$.Go.Mind;
	m_Body$		= job$.Go.Body;
}

event OnJobInit$( Job job$ )
{
	OnJobInitPointers$( job$ );

	m_Target$	= job$.GoalObject;

	SetState Talk$;
}

////////////////////////////////////////////////////////////////////////////////
//	blab blab away... pretend you're Lee on coffee
state Talk$
{
	transition
	{
		-> Exiting$:	OnWorldMessage( WE_REQ_TALK_END ) =
		{
			if( m_Go$.Mind.ActorAutoFidgets )
			{
				StartFidgetIfRequired$();
			}
		}
		-> Exiting$:	OnWorldMessage( WE_ANIM_DONE ) =
		{
			if( m_Go$.Mind.ActorAutoFidgets )
			{
				StartFidgetIfRequired$();
			}
		}
	}

	event OnEnterState$
	{
		if 	(
				( Victory.IsQuestCompleted( "quest_fallraen_barracks" )) &&
				( !GameAuditor.GetDb.GetBool( "snow_town_barracks_guard_gave_reward" ))
			)
		{
			m_Go$.GetConversation.RSSelectConversation( "conversation_guard_id_complete" );
			GameAuditor.GetDb.SetBool( "snow_town_barracks_guard_gave_reward", true );

			// Give the reward
			int i$ = 0;
			int iend$ = Player.GetHumanPlayerCount;
			
			while( i$ < iend$ )
			{
				SiegePos SpawnPos$;
				Goid gold$;
				GoCloneReq cloneReq$;
				
				cloneReq$ = MakeGoCloneReq( "gold" );
	
				SpawnPos$ = m_Target$.go.placement.position;
				cloneReq$.StartingPos = SpawnPos$;
	
				if( m_Target$.Go.Hasmind )
				{
					if( AIQuery.FindSpotRelativeToSource( m_Target$.Go, .25, .5, 2, m_Target$.Go.Mind.TempPos1 ) )
					{
						cloneReq$.StartingPos = m_Target$.Go.Mind.TempPos1;
					}
				}
				cloneReq$.SnapToTerrain = true;
				
				gold$ = GoDb.SCloneGo( cloneReq$ );
				gold$.Go.Aspect.SetGoldValue(1000);
				if ( World.IsMultiPlayer() ) 
				{
					string world_name$ = WorldMap.GetMpWorldName();
					if ( world_name$ == "veteran" ) 
					{
						gold$.Go.Aspect.SetGoldValue(73000);
					}
					else if ( world_name$ == "elite" ) 
					{
						gold$.Go.Aspect.SetGoldValue(320000);
					}
				}
				gold$.go.PlayVoiceSound( "sell", 5, 10, false );
				i$ += 1;
			}
		}
		else if ( GameAuditor.GetDb.GetBool( "turn_world_red" ))
		{
			m_Go$.GetConversation.RSSelectConversation( "conversation_guard_id_red" );
		}
		else if ( Victory.IsQuestCompleted( "quest_fallraen_barracks" ))
		{
			m_Go$.GetConversation.RSSelectConversation( "conversation_guard_id_complete" );
		}
		else
		{
			m_Go$.GetConversation.RSSelectConversation( "conversation_guard_id" );
		}
			if( m_Go$.Mind.ActorAutoFidgets )
			{
				StartFidgetIfRequired$();
			}
		m_Go$.GetConversation.RSActivateDialogue();
	}
}


////////////////////////////////////////////////////////////////////////////////
//	finish blabbing
state Exiting$
{
	event OnEnterState$
	{
		m_Job$.MarkForDeletion();
	}
}
