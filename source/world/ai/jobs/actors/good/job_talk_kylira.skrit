/*
  ============================================================================
  ----------------------------------------------------------------------------

	File		: 	job_talk_kylira.skrit

	Author(s)	: 	Chad Queen, Bartosz Kijanka, Eric Tams, David Tomandl

	Purpose		: 	Custom talk job for Kylira, a quest gal in Oasis.

	(C)opyright 2001 Gas Powered Games, Inc.

  ----------------------------------------------------------------------------
  ============================================================================
*/

Go		m_Go$;
GoMind	m_Mind$;
GoBody  m_Body$;
Job		m_Job$;
Goid	m_Target$;

#include "k_job_c_mcp_fidget_utils"
#include "k_job_c_talk_utils"

startup state STARTUP$
{
}

////////////////////////////////////////////////////////////////////////////////
//	init
event OnJobInitPointers$( Job job$ )
{
	m_Job$		= job$;
	m_Go$		= job$.Go;
	m_Mind$		= job$.Go.Mind;
	m_Body$		= job$.Go.Body;
}

event OnJobInit$( Job job$ )
{
	OnJobInitPointers$( job$ );

	m_Target$	= job$.GoalObject;

	SetState Talk$;
}

////////////////////////////////////////////////////////////////////////////////
//	blab blab away... pretend you're Lee on coffee
state Talk$
{
	transition
	{
		-> Exiting$:	OnWorldMessage( WE_REQ_TALK_END ) =
		{
			if( m_Go$.Mind.ActorAutoFidgets )
			{
				StartFidgetIfRequired$();
			}
		}
	}

	trigger OnWorldMessage$( WE_ANIM_DONE )
	{
		TryAnim$('talk');
	}

	event OnEnterState$
	{
		#only( game )
		[[
			if ( GameAuditor.GetDb.GetBool( "d_0x076004cd" ) )
			{
				m_Go$.GetConversation.RSSelectConversation( "zconversation_directions" );
				GameAuditor.GetDb.SetBool( "d_0x076004cd", false );
			}
			else if ( GameAuditor.GetDb.GetBool( "turn_world_red" ))
			{
				m_Go$.GetConversation.RSSelectConversation( "conversation_kylira_red" );
			}
			else if ( Goid.InValidGoid == UIPartyManager.DoesActivePartyHaveTemplate( "ring_utraean", m_Target$ ))
			{
				m_Go$.GetConversation.RSSelectConversation( "conversation_kylira" );
			}
			else if ( Victory.IsQuestCompleted( "quest_townstones" ) )
			{
				m_Go$.GetConversation.RSSelectConversation( "conversation_kylira_all_complete" );
			}
			else if ( Victory.IsQuestActive( "goto_hiroth_b" )) {
				m_Go$.GetConversation.RSSelectConversation( "conversation_kylira_goto" );
			}
			else if ( ( Victory.IsQuestActive( "quest_grescal" )) &&
				( Goid.InValidGoid != UIPartyManager.DoesActivePartyHaveTemplate( "stone_glb_grescal_01", m_Target$ )) )
			{
				m_Go$.GetConversation.RSSelectConversation( "conversation_kylira_complete" );
				if ( GameAuditor.GetDb.GetBool( "kylira_conversation_1" )) {
					if ( !GameAuditor.GetDb.GetBool( "kylira_gave_reward" ) )
					{
						GameAuditor.GetDb.SetBool( "kylira_gave_reward", true );
						DumpMain$; // drop loot
					}
				}
				else {
					GameAuditor.GetDb.SetBool( "kylira_conversation_1", true );
				}
			}
			else if ( ( Victory.IsQuestActive( "quest_grescal" )) &&
				( Goid.InValidGoid == UIPartyManager.DoesActivePartyHaveTemplate( "stone_glb_grescal_01", m_Target$ )) )
			{
				m_Go$.GetConversation.RSSelectConversation( "conversation_kylira_quest" );
			}
			else if ( ( !Victory.IsQuestActive( "quest_grescal" )) &&
				( Goid.InValidGoid != UIPartyManager.DoesActivePartyHaveTemplate( "stone_glb_grescal_01", m_Target$ )) )
			{
				m_Go$.GetConversation.RSSelectConversation( "conversation_kylira_stone" );
				if ( GameAuditor.GetDb.GetBool( "kylira_conversation_1" )) {
					if ( !GameAuditor.GetDb.GetBool( "kylira_gave_reward" ) )
					{
						GameAuditor.GetDb.SetBool( "kylira_gave_reward", true );
						DumpMain$; // drop loot
					}
				}
				else {
					GameAuditor.GetDb.SetBool( "kylira_conversation_1", true );
				}
			}
			else if ( ( !Victory.IsQuestActive( "quest_grescal" )) &&
				( Goid.InValidGoid == UIPartyManager.DoesActivePartyHaveTemplate( "stone_glb_grescal_01", m_Target$ )) )
			{
				m_Go$.GetConversation.RSSelectConversation( "conversation_kylira_ring" );
			}
			TryAnim$('talk');
			m_Go$.GetConversation.RSActivateDialogue();
		]]
	}
}

////////////////////////////////////////////////////////////////////////////////
//	finish blabbing
state Exiting$
{
	event OnEnterState$
	{
		m_Job$.MarkForDeletion();
	}
}
