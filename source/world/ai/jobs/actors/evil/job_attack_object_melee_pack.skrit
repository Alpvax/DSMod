/*
  ============================================================================
  ----------------------------------------------------------------------------

	File		: job_attack_object_melee.skrit

	Author(s)	: Bartosz Kijanka, biddle, Eric Tams

	Purpose		: Actors with thiss will keep their distance until there are 
				  enough firends nearby, then they will attack.

	(C)opyright 2000 Gas Powered Games, Inc.

  ----------------------------------------------------------------------------
  ============================================================================
*/


Go		m_Go$;
GoMind	m_Mind$;
GoBody  m_Body$;
Job		m_Job$;
Go		m_Weapon$;	// $$ ptr OK here as weapon won't change during execution of job

float	m_WatchDistance$;
float	m_FleeDistance$;
int		m_MinPackSize$;
float	m_RangeToTarget$;
Goid	m_Target$;

////////////////////////////////////////////////////////////////////////////////

#include "k_job_c_mcp_attack_utils" 

////////////////////////////////////////
//	TryFlee

void TryFlee$( Go From$ )
{
	// human player's actors can flee indefinitely, others are limited
	if( m_Go$.Player.IsScreenPlayer || ( !m_Go$.Player.IsScreenPlayer && m_Mind$.FleeCount > 0 ) )
	{
		// $ These checks were placed to avoid neutral creatures fleeing from each other.
		// maybe we should solve this with Memeberships? -ET
	
		if( From$ == NULL )
		{
			return;
		}
		
		if(From$.HasActor())
		{
			if( From$.actor.getalignment == AA_NEUTRAL )
			{
				return;
			}
		}
		m_Mind$.SDoJob( MakeJobReq( JAT_FLEE_FROM_OBJECT, JQ_ACTION, QP_FRONT, AO_REFLEX, From$.Goid ) );
	}
}

void Fidget$( )
{
	// just fidget once.
	eAnimStance stance$ = m_Go$.inventory.animstance;
	int subanim$ = m_Go$.Aspect.AspectHandle.Blender.GetNumSubAnims(CHORE_FIDGET,stance$);
	subanim$ = Math.RandomInt(0, Math.MaxInt( 0, subanim$-1 ) ) ;
	MCPManager.MakeRequest( m_Go$.Goid, PL_FIDGET, subanim$);
}

bool TryApproach$( Go Target$ )
{
	eReqRetCode ret$ = MCPManager.MakeRequest(
									m_Go$.Goid,
									PL_APPROACH, 
									Target$.goid,
									m_LookAhead$, 
									m_MaxApproachTime$,
									m_WatchDistance$ ) ;

	if( RequestFailed(ret$) )
	{
		return false;
	}
	return true;
}

////////////////////////////////////////////////////////////////////////////////
//	global message handler
trigger OnWorldMessage$( WE_REQ_JOB_END        ) { SetState( CleaningUpAndExiting$ ); }
trigger OnWorldMessage$( WE_ENGAGED_INVALID    ) { SetState( CleaningUpAndExiting$ ); }
trigger OnWorldMessage$( WE_ENGAGED_KILLED     ) { SetState( CleaningUpAndExiting$ ); }
trigger OnWorldMessage$( WE_ENGAGED_HIT_KILLED ) { SetState( CleaningUpAndExiting$ ); }
trigger OnWorldMessage$( WE_DESTRUCTED         ) { SetState( Exiting$              ); }
trigger OnWorldMessage$( WE_JOB_DESTRUCTED     ) { SetState( Exiting$              ); }


////////////////////////////////////////////////////////////////////////////////

startup state STARTUP$
{
}

////////////////////////////////////////////////////////////////////////////////
//	init
event OnJobInitPointers$( Job job$ )
{
	m_Job$		= job$;
	m_Go$		= job$.Go;
	m_Mind$		= job$.Go.Mind;
	m_Body$		= job$.Go.Body;
	m_Weapon$	= job$.GoalModifier.Go;
	m_WatchDistance$ = 6.0; // how close to follow someone when there aren't enough friends around to attack.
	m_FleeDistance$ = 4.0;  // when to flee if there aren't enough freinds to attack.
	m_MinPackSize$ = 2; // need this number of friends before we attack.
}


event OnJobInit$( Job job$ )
{
	OnJobInitPointers$( job$ );

	if( m_Weapon$ == NULL )
	{
		m_Weapon$ = m_Go$;
	}

	m_Target$ = job$.GoalObject;

	if( m_Target$.Go == NULL )
	{
		SetState Exiting$;
	}
	else if( m_Target$.Go.IsActor && !IsAlive( m_Target$.Go.Aspect.LifeState ) )
	{
		SetState Exiting$;
	}
	else
	{
		ResetPathFindingParameters$();
    	
 		// Account distance that the weapon can extend the attacker's space
		m_RangeToTarget$ = m_Go$.mind.PersonalSpaceRange;
		if( m_Weapon$ == m_Go$)
		{
			m_RangeToTarget$ += m_Go$.Attack.AttackRange;
			//report.genericf( "m_Go$.Attack.AttackRange: %f\n",m_Go$.Attack.AttackRange);
		
		} else {
			m_RangeToTarget$ += m_Mind$.WeaponRange;
			//report.genericf( "m_Mind$.WeaponRange: %f\n",m_Mind$.WeaponRange);
		}
    	//report.genericf( "m_Go$.mind.PersonalSpaceRange: %f\n",m_Go$.mind.PersonalSpaceRange);
		
    	//report.genericf( "m_RangeToTarget: %f\n",m_RangeToTarget$);
			
		// Account for target's space
		if m_Target$.go.HasMind()
		{
			 m_RangeToTarget$ += m_Target$.go.mind.PersonalSpaceRange;
		}
		else
		{
			 m_RangeToTarget$ += m_Target$.go.aspect.BoundingSphereRadius;
		}
    	//report.genericf( "m_RangeToTarget2: %f\n",m_RangeToTarget$);
		
		// $$$ Mike: can we get by without tweaking by some constant amount here? -bk
    	
		m_RangeToTarget$ *= 0.9;	// Shrink the engage range just slightly
									// too many paths are failing 
    	//report.genericf( "m_RangeToTarget3: %f\n",m_RangeToTarget$);
		
		SetState( WaitForPack$ );
	}
}

state WaitForPack$
{
	trigger OnWorldMessage$( WE_ANIM_DONE )
	{
		Fidget$();
	}
	
	trigger OnWorldMessage$( WE_JOB_TIMER_DONE )
	{
		m_Job$.SetTimer( m_Mind$.SensorScanPeriod );
		
		// get the number of friends we can see.
		m_Mind$.TempQtColl1.Clear;
		m_Mind$.TempQtColl1.Add( QT_FRIEND  );
		
		m_Mind$.TempGopColl2.Clear;
		if( m_Mind$.GetVisible( m_Mind$.TempQtColl1, m_Mind$.TempGopColl2 ) )
		{
			//report.genericf("found %d friends.\n", m_Mind$.TempGopColl2.Size());
			
			// if we have enough friends attack the target.
			if( m_Mind$.TempGopColl2.Size() >= m_MinPackSize$ )
			{
				//report.generic("attacking\n");
				SetState RequestAction$;
				return;
			}
		}
		float dist$ = m_Mind$.GetDistanceAtPlanEnd( m_Target$.Go );
			
		// if we don't have enough friends and the guy is too close run away.
		if( dist$ < m_FleeDistance$ )
		{
			//report.generic("fleeing\n");
			TryFlee$( m_Target$.Go );
			return;
		}
		
		// if we don't have enough friends and the guy is too far away approach him.
		if( dist$ > m_WatchDistance$ )
		{
			//report.generic("approaching\n");
			TryApproach$( m_Target$.Go );
			return;
		}
		//report.generic("nothing\n");
	}
	
	trigger OnWorldMessage$( WE_DAMAGED )
	{
		SetState RequestAction$;
	}
		
	event OnEnterState$
	{
		m_Job$.SetTimer( 0 );
		m_Job$.TraitUseSpatialSensors = true;
		Fidget$();
	}
	
	event OnExitState$
	{
		m_Job$.TraitUseSpatialSensors = false;
	}
}	

state RequestAction$
{

	transition
	{
		-> TargetMoved$:					OnWorldMessage( WE_MCP_DEPENDANCY_BROKEN );
		-> HeadToHead$:						OnWorldMessage( WE_MCP_MUTUAL_DEPENDANCY );
		-> RequestAction$:					OnWorldMessage( WE_JOB_TIMER_DONE );
		-> CleaningUpAndExiting$:			OnWorldMessage( WE_MCP_INVALIDATED );
		-> DamagingAndFollowingThrough$:	OnWorldMessage( WE_ANIM_WEAPON_FIRE );
		-> Error_FireNotFound$:				OnWorldMessage( WE_ANIM_DONE );
	}

	event OnEnterState$
	{
		report.reportf("aiskrit","%s:ATTACK TARGET\n",m_Go$.TemplateName);

		////////////////////////////////////////
		//	check standing orders

		if( m_Mind$.MovementOrders == MO_HOLD && !m_Job$.IsUserAssigned )
		{
			report.reportf( "aiskrit", "m_RangeToTarget3: %f\n",m_RangeToTarget$ );
			float holdRange$ = m_RangeToTarget$ * 1.35;
			report.reportf( "aiskrit", "range: %f\n",holdRange$ );

			if( !AIQuery.IsInRange( m_Go$.Placement.Position, m_Target$.Go.Placement.Position, holdRange$ ) )
			{
				report.reportf( "aiskrit", "Not within %2.2f, distance = %2.2f!\n", holdRange$, AIQuery.GetDistance( m_Go$.Placement.Position, m_Target$.Go.Placement.Position ) );

				// 	If we are something that switchs to melee lets bail since we have a backup attack; allow them to rerun0
				//	the generic attack, which perhaps will have them switch to a ranged attack...

				if( m_Mind$.OnEnemyEnteredICZSwitchToMelee && ( m_Mind$.MayAutoUseRangedWeapon() || m_Mind$.MayAutoCastLifeDamagingSpell() ) )
				{
					SetState Exiting$;
					return;
				}

				m_Job$.SetTimer( m_Mind$.SensorScanPeriod );
				return;
			}
		}

		////////////////////////////////////////
		//	start an attack iteration

		// Pick a Random animation to be used
		eAnimStance stance$ = m_Go$.inventory.animstance;
		int subanim$ = m_Go$.Aspect.AspectHandle.Blender.GetNumSubAnims(CHORE_ATTACK,stance$);
		subanim$ = Math.RandomInt( 0, Math.MaxInt( 0, subanim$-2 ) );

		// Need to make the length of the attack loop a tunable parameter

		// Adding the Reload delay to the attack loop duration will keep the
		// attacker from coming to a standstill. It also removes the need for a 
		// timer state. Once we see an ANIM_DONE, we know we have delayed for the 
		// correct amount of time.

		float attack_loop_duration$ = m_Weapon$.Attack.ReloadDelay;
		attack_loop_duration$ += m_Go$.Aspect.AspectHandle.Blender.GetBaseDuration(CHORE_ATTACK,stance$);
		eReqRetCode ret$;

		if( m_Mind$.MovementOrders == MO_HOLD && !m_Job$.IsUserAssigned )
		{
			ret$ = MCPManager.MakeRequest(
										   	m_Go$.Goid,
										   	PL_ATTACK_OBJECT_MELEE,
										   	attack_loop_duration$,
										   	subanim$,
										   	m_Target$,
											m_LookAhead$,
											0,
										   	m_RangeToTarget$,
										   	REQFLAG_NOMOVE );
		}
		else
		{
			ret$ = MCPManager.MakeRequest(
										   	m_Go$.Goid,
										   	PL_ATTACK_OBJECT_MELEE,
										   	attack_loop_duration$,
										   	subanim$,
										   	m_Target$,
											m_LookAhead$, 
											m_MaxApproachTime$,
										   	m_RangeToTarget$);
		}

		report.reportf( "aimove","[%s] PL_ATTACK_OBJECT_MELEE [%s] returned [%s]\n", m_Go$.TemplateName, m_Target$.go.TemplateName, ToString(ret$) );

		if( RequestFailed(ret$) )
		{
			SetState( Exiting$ );
		}
		else if (ret$ == REQUEST_OK_BEYOND_RANGE)
		{
			SetState( MovingCloser$ );
		}
		else if (ret$ == REQUEST_OK)
		{
		}
		else // (ret$ == REQUEST_OK_IN_RANGE)
		{
			SetState( ContinueAction$ );
		}				
	}
}

state ContinueAction$
{
	// We arrive at this state after we receive a 'WE_MCP_MUTUAL_DEPENDANCY' message
	// or if the characters is within range and we want to ignore any WE_MCP_MUTUAL_DEPENDANCY

	transition
	{
		-> TargetMoved$:					OnWorldMessage( WE_MCP_DEPENDANCY_BROKEN );
		-> CleaningUpAndExiting$:			OnWorldMessage( WE_MCP_INVALIDATED );
		-> DamagingAndFollowingThrough$:	OnWorldMessage( WE_ANIM_WEAPON_FIRE );
		-> Error_FireNotFound$:				OnWorldMessage( WE_ANIM_DONE );
	}
}


state DamagingAndFollowingThrough$
{
	transition
	{
		-> CleaningUpAndExiting$:			OnWorldMessage( WE_MCP_INVALIDATED );
		-> DamagingAndFollowingThrough$:	OnWorldMessage( WE_ANIM_WEAPON_FIRE );
		-> RequestAction$:				   	OnWorldMessage( WE_ANIM_DONE );
		-> CleaningUpAndExiting$:			OnWorldMessage( WE_ENGAGED_HIT_KILLED );
	}

	event OnEnterState$
	{
		report.reportf("aiskrit","%s:DAMAGE AND FOLLOW THROUGH!\n",m_Go$.TemplateName);
		m_Mind$.RequestProcessHitEngaged();
	}
}


state Error_FireNotFound$
{
	transition
	{
		-> CleaningUpAndExiting$:			OnWorldMessage( WE_MCP_INVALIDATED );
		-> RequestAction$:					OnWorldMessage( WE_JOB_TIMER_DONE );
	}

	event OnEnterState$
	{
		report.reportf("aiskrit","%s:NO FIRE FOUND!\n",m_Go$.TemplateName);
		m_Mind$.RequestProcessHitEngaged();
		m_Job$.SetTimer( m_Weapon$.Attack.ReloadDelay );
	}

}


state CleaningUpAndExiting$
{
	transition
	{
		-> Exiting$:						OnWorldMessage( WE_ANIM_DONE );
	}
	event OnEnterState$
	{
		// Let an attack animation finish its follow through
		report.reportf("aiskrit","%s:CLEANING UP!\n",m_Go$.TemplateName);

		if (m_Go$.Aspect.AspectHandle.CurrentChore != CHORE_ATTACK)
		{
			SetState(Exiting$);
		} 
	}

}


state Exiting$
{
	event OnEnterState$
	{
		report.reportf("aiskrit","%s:EXIT ATTACK!\n",m_Go$.TemplateName);
		m_Job$.MarkForDeletion();
	}
}
