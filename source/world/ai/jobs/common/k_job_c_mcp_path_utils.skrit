/*
  ============================================================================
  ----------------------------------------------------------------------------

	File		: k_job_c_mcp_path_utils

	Author(s)	: biddle

	Purpose		: This file contains shared path finding/following routines
				  used by AI skrits that need to move

	Requirements	: There must be an m_Job$, m_Go$, and m_Target$
					  as well as a RequestAction$ state defined in the 
					  skrit that includes these utilities

	(C)opyright 2001 Gas Powered Games, Inc.

  ----------------------------------------------------------------------------
  ============================================================================
*/


float	m_MaxApproachTime$;
float	m_LookAhead$;
float	m_MinRetargetDelay$;
float	m_MaxRetargetDelay$;
float	m_AdditionalRePathTime$;


////////////////////////////////////////////////////////////////////////////////
// Reset the lookahead and delays
void ResetPathFindingParameters$() 
{

	// How long would it take to go to the limit of the engage range?
//  	m_MaxApproachTime$ = m_Go$.mind.MeleeEngageRange / m_Go$.body.AvgMoveVelocity;
  	m_MaxApproachTime$ = 5.0 / m_Go$.body.AvgMoveVelocity;

	if (m_Target$.go.HasBody())
	{
		m_LookAhead$       = 2.0 / m_Target$.go.body.AvgMoveVelocity;
	}
	else
	{
		m_LookAhead$       = 1.0;   // If there is body, the object can't move
									// so we just make sure this value is non-zero
	}

	m_MaxRetargetDelay$ = Math.MinFloat((m_MaxApproachTime$*0.9), 1.75);
	m_MinRetargetDelay$ = Math.MinFloat((m_MaxApproachTime$*0.8), 1.50);

	// get us to the next way point.  but make sure we don't path _too_ far into the future. 
	// we also will add 0.25 for the worst case two frames.
	if( m_Go$.body.AvgMoveVelocity < 1 )
	{
		m_AdditionalRePathTime$ = 1.0;
	}
	else
	{
		m_AdditionalRePathTime$ = 1.0 / m_Go$.body.AvgMoveVelocity + 0.25;
	}


//	report.genericf("%s:SMARTS  [mt] %5.3f [la] %5.3f [rd] %5.3f-%5.3f\n",
//				m_Go$.TemplateName,
//				m_MaxApproachTime$,
//				m_LookAhead$,
//				m_MinRetargetDelay$,
//				m_MaxRetargetDelay$ );
}

state MovingCloser$
{

	transition
	{
		-> HeadToHead$:		OnWorldMessage( WE_MCP_MUTUAL_DEPENDANCY );
		-> TargetMoved$:	OnWorldMessage( WE_MCP_DEPENDANCY_BROKEN );
		-> AnimDone$:		OnWorldMessage( WE_ANIM_DONE );
		-> AlmostDone$:   	OnWorldMessage( WE_MCP_SECTION_COMPLETED );

		// Don't trigger a new request on a warning --biddle
		//-> AlmostDone$:   	OnWorldMessage( WE_MCP_SECTION_COMPLETE_WARNING );
	}

	event OnEnterState$
	{
		report.reportf("aimove","[%s] BEYOND RANGE, MOVING CLOSER\n",m_Go$.TemplateName);

		this.CreateTimer( 1, Math.RandomFloat( m_MinRetargetDelay$,m_MaxRetargetDelay$ ) );

		// check to see when we are going to be nearly completed with our path
		// and set a timer to re-evaluate ourselves at that time.
		float repathTime$;
		repathTime$ =  MCPManager.GetLastRequestTimeRemaining( m_Go$.goid ) - m_AdditionalRePathTime$;
		if( repathTime$ <= 0 )
		{
			// if we are still in the moving closer state, set our state to almost done,
			// this state is lower priority than the other exit conditions.
			this.CreateTimer( 2, 0 );
		}
		else
		{
			this.CreateTimer( 2, repathTime$ );
		}

		return;
	}

	trigger OnTimer$( 1 )
	{
		SetState (TimeIsUp$);
	}

	// we are almost done with our path, time to re-evaluate now and keep things
	// smooth in multiplayer
	trigger OnTimer$( 2 )
	{
		SetState (AlmostDone$);
	}

}

state HeadToHead$
{
	// No timer when we are going head-to-head
	transition
	{
		-> TargetMoved$:	OnWorldMessage( WE_MCP_DEPENDANCY_BROKEN );
		-> AnimDone$:		OnWorldMessage( WE_ANIM_DONE );
	}

	event OnEnterState$
	{
		report.reportf("aimove","[%s] Target is now on head to head path\n",m_Go$.TemplateName);
	}

}

state TargetMoved$
{
	event OnEnterState$
	{
		report.reportf("aimove","[%s] Target moved!...try again\n",m_Go$.TemplateName);
 		SetState (RepeatAction$);
	}
}

state AlmostDone$
{
	event OnEnterState$
	{
		report.reportf("aimove","[%s] About to finish walk section (avoid pop!)...try again\n",m_Go$.TemplateName);
		// Don't send a flush, we WANT to finish the walk
		SetState (RequestAction$);
	}
}

state TimeIsUp$
{
	event OnEnterState$
	{
		report.reportf("aimove","[%s] Timer Expired...try again\n",m_Go$.TemplateName);
 		SetState (RepeatAction$);
	}
}

state AnimDone$
{
	event OnEnterState$
	{
		report.reportf("aimove","[%s] Anim Done [ugly pop!]...approach again\n",m_Go$.TemplateName);
 		SetState (RepeatAction$);
 	}
}

state RepeatAction$
{
	event OnEnterState$
	{
		// really want to flush the MCP here
		MCPManager.Flush(m_Go$.goid,0);
		SetState (RequestAction$);
	}
}

