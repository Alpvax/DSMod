/*
  ============================================================================
  ----------------------------------------------------------------------------

	File		: 	job_unconscious.skrit

	Author(s)	: 	Bartosz Kijanka

	Purpose		: 	Unequip gear, pass out, wait for gaining consciousness, then
					get up and re-equip gear.

	(C)opyright 2001 Gas Powered Games, Inc.

  ----------------------------------------------------------------------------
  ============================================================================
*/


Go		m_Go$;
GoMind	m_Mind$;
Job		m_Job$;

Goid	m_Weapon$;
Goid	m_Shield$;

startup state STARTUP$
{
}


////////////////////////////////////////////////////////////////////////////////
//	init
event OnJobInitPointers$( Job job$ )
{
	m_Job$		= job$;
	m_Go$		= job$.Go;
	m_Mind$		= job$.Go.Mind;
/*
	this.TraceOpCodes	   = true;
	this.TraceSkritCalls   = true;
	this.TraceStateChanges = true;
*/
}


////////////////////////////////////////////////////////////////////////////////
//	
event OnJobInit$( Job job$ )
{
	OnJobInitPointers$( job$ );

	SetState UnequippingGear$;
}


////////////////////////////////////////////////////////////////////////////////
//	global event handler
trigger OnWorldMessage$( WE_DESTRUCTED     ) { SetState Exiting$;    }
trigger OnWorldMessage$( WE_JOB_DESTRUCTED ) { SetState DoneWaking$; }


////////////////////////////////////////////////////////////////////////////////
//	UnequippingGear$
state UnequippingGear$
{
	event OnEnterState$
	{
		if( m_Go$.IsHuded )
		{
			report.report( "aiskrit", "UnequippingGear$ - entered state\n" );
		}

		/////////////////////////////////////////
		//	unequip gear
		Go weapon$ = m_Go$.Inventory.GetEquipped( ES_WEAPON_HAND );
		Go shield$ = m_Go$.Inventory.GetEquipped( ES_SHIELD_HAND );

		if( weapon$ != NULL )
		{
			if ( m_Go$.Inventory.GetSelectedLocation() == IL_ACTIVE_MELEE_WEAPON  )
			{				
				m_Weapon$ = m_Go$.Inventory.GetItem( IL_ACTIVE_MELEE_WEAPON ).Goid;				
			}			
			else if ( m_Go$.Inventory.GetSelectedLocation() == IL_ACTIVE_PRIMARY_SPELL ||
					  m_Go$.Inventory.GetSelectedLocation() == IL_ACTIVE_SECONDARY_SPELL )
			{
				if ( m_Go$.Inventory.GetItem( IL_ACTIVE_MELEE_WEAPON ) != NULL )
				{	
					Go active_melee$ = m_Go$.Inventory.GetItem( IL_ACTIVE_MELEE_WEAPON );
					if ( m_Go$.Attack.GetAttackClass() == AC_STAFF )
					{
						m_Weapon$ = m_Go$.Inventory.GetItem( IL_ACTIVE_MELEE_WEAPON ).Goid;
					}
				}
			}		

			m_Go$.Inventory.RSUnequip( ES_WEAPON_HAND, m_Job$.Origin );
		}

		if( shield$ != NULL )
		{
			m_Shield$ = shield$.Goid;
			m_Go$.Inventory.RSUnequip( ES_SHIELD_HAND, m_Job$.Origin );
		}

		////////////////////////////////////////
		//	loose our mind
		m_Mind$.Clear( JQ_BRAIN );

		SetState Collapsing$;
	}
}


////////////////////////////////////////////////////////////////////////////////
//	Collapsing$
state Collapsing$
{
	transition
	{
		-> Sleeping$:	OnWorldMessage( WE_ANIM_DONE );
		-> Waking$:		OnWorldMessage( WE_GAINED_CONSCIOUSNESS );
		// we can gain consciousness before we finish colapsing if someone heals us. -ET
	}

	event OnEnterState$
	{
		if( m_Go$.IsHuded )
		{
			report.report( "aiskrit", "Collapsing$ - entered state\n" );
		}

		if( m_Go$.Aspect.AspectHandle.CurrentChore == CHORE_DIE )
		{
			SetState Sleeping$;
		}
		else
		{
			// Pick a Random animation to use
			eAnimStance stance$ = m_Go$.inventory.animstance;
			int subanim$ = m_Go$.Aspect.AspectHandle.Blender.GetNumSubAnims(CHORE_DIE,stance$);
			subanim$ = Math.RandomInt(0, Math.MaxInt( 0, subanim$-1 ) );

			MCPManager.Flush(m_Go$.Goid);
			MCPManager.MakeRequest( m_Go$.Goid, PL_DIE, subanim$ );
		}
	}
}

////////////////////////////////////////////////////////////////////////////////
//	Sleeping$
state Sleeping$
{
	transition
	{
		-> Waking$:					OnWorldMessage( WE_GAINED_CONSCIOUSNESS );
//		-> Waking$:					OnWorldMessage( WE_ANIM_DONE );
	}

	event OnEnterState$
	{
		if( m_Go$.IsHuded )
		{
			report.report( "aiskrit", "Sleeping$ - entered state\n" );
		}
	}
}


////////////////////////////////////////////////////////////////////////////////
//	Waking$
state Waking$
{
	transition
	{
		-> DoneWaking$:	OnWorldMessage( WE_ANIM_DONE );
		-> Collapsing$:	OnWorldMessage( WE_KILLED );
	}

	event OnEnterState$
	{
		if( m_Go$.IsHuded )
		{
			report.report( "aiskrit", "Waking$ - entered state\n" );
		}

		int getupanim$ = m_Go$.Aspect.AspectHandle.Blender.GetSubAnimIndex(CHORE_MISC,'gtup');

		if (getupanim$ >= 0)
		{
			eReqRetCode ret$ = MCPManager.MakeRequest( m_Go$.Goid, PL_PLAYANIM, CHORE_MISC, getupanim$, 0 );
			if ( RequestFailed(ret$) )
			{
				SetState DoneWaking$;
			}
		}
		else
		{
			SetState DoneWaking$;
		}
	}	
}


////////////////////////////////////////////////////////////////////////////////
//	DoneWaking$
state DoneWaking$
{
	transition
	{
		-> Collapsing$:	OnWorldMessage( WE_KILLED );
	}
	event OnEnterState$
	{
		if( m_Go$.IsHuded )
		{
			report.report( "aiskrit", "DoneWaking$ - entered state\n" );
		}
		m_Mind$.SDoJob( MakeJobReq( JAT_BRAIN, JQ_BRAIN, QP_CLEAR, AO_REFLEX ));
		SetState RequippingGear$;
	}
}

////////////////////////////////////////////////////////////////////////////////
//	RequippingGear$
state RequippingGear$
{
	transition
	{
		-> UnequippingGear$:	OnWorldMessage( WE_KILLED );
	}

	event OnEnterState$
	{
		if( m_Go$.IsHuded )
		{
			report.report( "aiskrit", "RequippingGear$ - entered state\n" );
		}

		// add  the stuff back to our hands, all the time in single player, and only
		// if we aren't going to lose it in multiplayer
		
		#only( game )
		[[
		if( ( !IsMultiPlayer() || (server.GetDropInvOption() != dio_equipped && server.GetDropInvOption() != dio_all) ) 
			&& ( m_Go$.Aspect.GetIsRespawningAsGhost() == true || IsAlive( m_Go$.Aspect.LifeState ) || IsGhost( m_Go$.Aspect.LifeState ) ) && !m_Go$.Inventory.IsPackOnly() )
		{
			eInventoryLocation selection$ = m_Go$.Inventory.GetSelectedLocation();

			if( m_Weapon$.Go != NULL )
			{
				m_Go$.Inventory.RSEquip( ES_WEAPON_HAND, m_Weapon$, m_Job$.Origin );
			}
			else
			{
				m_Go$.Inventory.RSEquip( ES_WEAPON_HAND, Goid.NoneGoid, m_Job$.Origin );
			}

			if( m_Shield$.Go != NULL )
			{
				m_Go$.Inventory.RSEquip( ES_SHIELD_HAND, m_Shield$, m_Job$.Origin );
			}

			if ( m_Go$.Inventory.GetItem( selection$ ) != NULL )
			{
				m_Go$.Inventory.RSSelect( selection$, AO_REFLEX );
			}
		}
		]]
		SetState Exiting$;
	}
}

////////////////////////////////////////////////////////////////////////////////
//	Exiting$
state Exiting$
{
	event OnEnterState$
	{
		m_Job$.MarkForDeletion( JR_OK );
	}
}
