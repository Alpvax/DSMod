/*
  ============================================================================
  ----------------------------------------------------------------------------

	File		: 	job_fidget.skrit

	Author(s)	: 	Eric Tams orig Bartosz Kijanka

	Purpose		: 	Wander around in a circle, grab a beer, talk to your friends.

	(C)opyright 2000 Gas Powered Games, Inc.

  ----------------------------------------------------------------------------
  ============================================================================
*/


property	float	move_distance$		= 5.0		doc = "How far we will move from where we started";
property	float	min_distance$		= 3.0		doc = "Minimum distance for a move to take place";
property	float	delay_min$			= 10.0		doc = "minimum delay before moving again";
property	float	delay_max$			= 20.0		doc = "maximum delay before moving again";

property	float	destructive$		= 0.00		doc = "chance to find something to break, and attack it.";
property	float	curious$			= 0.00		doc = "chance to find something interesting, and look at it.";

property	float	social$				= 0.00		doc = "chance to find a friend, and talk to it.";
property	int		social_limit$		= 4			doc = "Actor will not move to be social with target actor if there are a number of actors greater then or equal to this value near it.";
property	float	social_limit_dist$	= 2.0		doc = "distance actor will look to see if his target location is too crowded.";
property	bool	social_once$		= false		doc	= "actor will only try to be social once.";

property	float	wander$				= 1.00		doc = "chance to find a friend, and talk to it.";
property	int		wander_limit$		= 1			doc = "Actor will not wander to target location if there are a number of actors greater then or equal to this value near it.";
property	float	wander_limit_dist$	= 1.0		doc = "distance actor will look to see if his target location is too crowded.";

property	bool	friend_template$	= true		doc = "monsters are only friends with others of the same template name";
property	string	friends$						doc = "Will only talk to creatures with this membership if specified (for social).";
property	string	interest$						doc = "Will only look at things with this membership if specified. (for curious)";

property	float	approach_dist$		= 1.2		doc = "Distance away from an object that you are trying to approach to.";

property	bool	meander$			= false		doc = "Lower speed to MinMoveVelocity when wandering around";
property	bool	still$				= true		doc = "Just stand around, don't move about or anything.";


Go		m_Go$;
GoMind	m_Mind$;
GoBody  m_Body$;
Job		m_Job$;
Goid	m_Target$;
float	m_OrigSpeed$ = 0.0;


#include "k_job_c_mcp_fidget_utils"

void FaceTarget$()
{
	if ( m_Target$.IsValid )
	{
		if( m_Target$.Go.HasMind && m_Mind$.CanOperateOn( m_Target$.Go ) )
		{
			if ( !m_Target$.Go.Mind.AmBusy && ( m_Mind$.GetDistance( m_Target$.Go ) < 2.0 ) )
			{
				if( m_Target$.Go.Mind.CanOperateOn( m_Go$ ))
				{
					if( !m_Target$.Go.Mind.AmFacing( m_Go$ ))
					{
						MCPManager.Flush( m_Target$ );
						
						eAnimStance stance$ = m_Target$.Go.inventory.animstance;
						int subanim$ = m_Target$.Go.Aspect.AspectHandle.Blender.GetNumSubAnims(CHORE_FIDGET,stance$);
						subanim$ = Math.RandomInt(0, Math.MaxInt( 0, subanim$-1 ) ) ;
						eReqRetCode ret$ = MCPManager.MakeRequest( m_Target$, PL_FIDGET, subanim$);
						
						m_Target$.Go.Mind.SDoJob( MakeJobReq( JAT_FACE, JQ_ACTION, QP_FRONT, AO_REFLEX, m_Go$.Goid ) );
					}
				}
			}
		}		
		if( m_Mind$.CanOperateOn( m_Target$.Go ) )
		{
			if( !m_Mind$.AmFacing( m_Target$.Go ) )
			{
				m_Mind$.SDoJob( MakeJobReq( JAT_FACE, JQ_ACTION, QP_FRONT, AO_REFLEX, m_Target$ ) );
			}
		}
	}
}

void ChangeSpeed$()
{
	if( meander$ )
	{
		m_Go$.Body.SetAvgMoveVelocity( m_Go$.Body.MinMoveVelocity );
	}
}

void ResetSpeed$()
{
	if( meander$ )
	{
		if( m_OrigSpeed$ > 0.0 )
		{
			m_Go$.Body.SetAvgMoveVelocity( m_OrigSpeed$ );
		}
	}
}


	
////////////////////////////////////////////////////////////////////////////////

startup state Unknown$
{
}

////////////////////////////////////////////////////////////////////////////////
//	init
event OnJobInitPointers$( Job job$ )
{
	m_Job$					= job$;
	m_Go$					= job$.Go;
	m_Mind$					= job$.Go.Mind;
	m_Body$					= job$.Go.Body;	
	m_Target$				= Goid.InvalidGoid;
	
}

event OnJobInit$( Job job$ )
{
	OnJobInitPointers$( job$ );
	m_OrigSpeed$ = m_Go$.Body.AvgMoveVelocity;
	SetState Wandering$;
}

////////////////////////////////////////////////////////////////////////////////
//	
state Wandering$
{
	trigger OnWorldMessage$( WE_ANIM_DONE )
	{
		StartFidgetIfRequired$();
	}
	
	trigger OnWorldMessage$( WE_MCP_SECTION_COMPLETED )
	{
		if( !still$ )
		{
			FaceTarget$();
		}
	}
	
	trigger OnTimer$( 1 )
	{
		This.CreateTimer( 1 , Math.RandomFloat( delay_min$, delay_max$ ) ); 
		
		if( ( m_Mind$.MovementOrders == MO_FREE ) && m_Go$.WasInViewFrustumRecently && !m_Mind$.AliveEnemiesVisible )
		{
			bool found_spot$ = false;
			m_Target$ = Goid.InvalidGoid;
			
			if( Math.RandomFloat( 1 ) < destructive$ )
			{
//				report.generic("I want to be destructive\n");
				m_Mind$.TempGopColl1.Clear;
				
				m_Mind$.GetOccupantsInSphere( m_Mind$.SightRange, m_Mind$.TempGopColl1);
				int i$ = 0;
				bool found$ = false;
				while( i$ < m_Mind$.TempGopColl1.Size() && !found$ )
				{
					if(m_Mind$.TempGopColl1.Get( i$ ).IsBreakable() && !m_Mind$.TempGopColl1.Get( i$ ).IsActor())
					{
						found$ = true;
						m_Mind$.SDoJob( MakeJobReq(JAT_ATTACK_OBJECT, JQ_ACTION, QP_FRONT, m_Job$.GetOrigin, m_Mind$.TempGopColl1.Get( i$ ).goid, m_Go$.Goid ) );
						return;
					}
					i$ += 1;
				}
			} 
			
			if( Math.RandomFloat( 1 ) < curious$ )
			{
//				report.generic("I want to be curious\n");
				bool found$ = false;
				Go object$;

				if( !StringTool.IsEmpty( interest$ ) )
				{
					m_Mind$.TempGopColl1.Clear;
					m_Mind$.TempGopColl2.Clear;
					
					AIQuery.GetOccupantsInSphere( m_Go$.Placement.Position, m_Mind$.SightRange, m_Mind$.TempGopColl1 );
					int i$ = 0;
					while( i$ < m_Mind$.TempGopColl1.Size() )
					{
						Go temp$ = m_Mind$.TempGopColl1.Get( i$ );
						if( temp$ != NULL )
						{
							if( temp$.HasCommon )
							{
								if( m_Mind$.TempGopColl1.Get( i$ ).common.Membership.Contains( interest$ ) )
								{
									m_Mind$.TempGopColl2.add( temp$ );
								}
							}
						}
						i$ += 1;
					}
					if( m_Mind$.TempGopColl2.Size() > 0 )
					{
						found$ = true;
						object$ = m_Mind$.TempGopColl2.Get( Math.RandomInt( m_Mind$.TempGopColl2.Size() - 1 ) );
					}
				}
				
				if( !found$ )
				{
					m_Mind$.TempQtColl1.Clear;
					m_Mind$.TempQtColl1.Add( QT_ITEM );
					object$ = m_Mind$.GetClosestVisible( m_Mind$.TempQtColl1 );
				}
				
				if (object$ != NULL)
				{
					if ( m_Mind$.GetDistance( object$ ) > min_distance$ )
					{
						MCPManager.Flush(m_Go$.Goid);
						ChangeSpeed$();
						eReqRetCode ret$ = MCPManager.MakeRequest( m_Go$.Goid, PL_APPROACH, object$.goid, delay_min$, delay_min$, approach_dist$ );
						ResetSpeed$();
						if( RequestFailed(ret$) )
						{
							InterruptAndStartFidget$();
						}
						return;
					}
				}
			}
			 
			if( Math.RandomFloat( 1 ) < social$ )
			{
//				report.generic("I want to be social\n");
				if( m_Mind$.AliveFriendsVisible() )
				{
					m_Mind$.TempQtColl1.Clear;
					m_Mind$.TempGopColl1.Clear;
					
					m_Mind$.TempQtColl1.Add( QT_FRIEND );
					m_Mind$.TempQtColl1.Add( QT_ALIVE_CONSCIOUS );
					
					Go temp$;
					
					if( friend_template$ || !StringTool.IsEmpty( friends$ ) )
					{		
						m_Mind$.TempGopColl2.Clear;
	
						if( m_Mind$.GetVisible( m_Mind$.TempQtColl1, m_Mind$.TempGopColl1 ) )
						{
							int i$ = 0;
							int iend$ = m_Mind$.TempGopColl1.size();
							
							while( i$ < iend$ )
							{                												
								Go test$ = m_Mind$.TempGopColl1.Get( i$ );
								if( friend_template$ )
								{            												
									if( test$.Templatename == m_Go$.templatename )
									{        												
										m_Mind$.TempGopColl2.Add( test$ );
									}        												
								}            												
								else         												
								{	         												
									if( !StringTool.IsEmpty( friends$ ) )
									{        												
										if( test$.common.Membership.Contains( friends$ ) )
										{    												
											m_Mind$.TempGopColl2.Add( test$ );
										}    												
									}									
								}            												
								i$ += 1;     												
							}
							if( m_Mind$.TempGopColl2.size > 0 )
							{
								temp$ = m_Mind$.TempGopColl2.Get( Math.RandomInt( m_Mind$.TempGopColl2.size - 1 ) );
							}
						}
					}
					else
					{
						temp$ = m_Mind$.GetClosestVisible( m_Mind$.TempQtColl1 );
					} 
						
					if (temp$ != NULL)
					{		
						m_Target$ = temp$.goid;
					
						if ( m_Mind$.GetDistance( m_Target$.Go ) > 1.5 )
						{
							bool doit$ = true;
							
							if( social_limit_dist$ > 0.0 )
							{
								m_Mind$.TempQtColl1.Clear;
								m_Mind$.TempGopColl1.Clear;
						
								AIQuery.GetOccupantsInSphere( m_Target$.Go.placement.position, social_limit_dist$, m_Mind$.TempGopColl1 );
	
								m_Mind$.TempQtColl1.Clear;
								m_Mind$.TempQtColl1.Add( QT_FRIEND );
								m_Mind$.TempQtColl1.Add( QT_ALIVE_CONSCIOUS );

								report.reportf( "aiskrit", "Social:%d Actors at target position\n",AIQuery.GetCount( m_Go$, m_Mind$.TempQtColl1, m_Mind$.TempGopColl1 ));
								
								if( AIQuery.GetCount( m_Go$, m_Mind$.TempQtColl1, m_Mind$.TempGopColl1 ) >= social_limit$ )
								{
									doit$ = false;
								}
							}	
								
							if( doit$ )
							{	
								MCPManager.Flush(m_Go$.Goid);
								ChangeSpeed$();
								eReqRetCode ret$ = MCPManager.MakeRequest( m_Go$.Goid, PL_APPROACH, m_Target$, delay_min$, delay_min$, approach_dist$ );
								ResetSpeed$();
								
								if( RequestFailed(ret$) )
								{
									InterruptAndStartFidget$();
								}
								if( social_once$ )
								{
									social$ = 0.0;
								}
							}
						} else if ( m_Mind$.GetDistance( m_Target$.Go ) < 0.5 ) {
							if( AIQuery.FindSpotRelativeToSource(	m_Target$.Go,
																	1.0,
																	1.5,
																	2.0,
																	m_Mind$.TempPos1 ) )
					   		{
								MCPManager.Flush(m_Go$.Goid);
								ChangeSpeed$();
								eReqRetCode ret$ = MCPManager.MakeRequest( m_Go$.Goid, PL_APPROACH, m_Mind$.TempPos1, 0.1 );
								ResetSpeed$();
								if( RequestFailed(ret$) )
								{
									InterruptAndStartFidget$();
								}								
								if( social_once$ )
								{
									social$ = 0.0;
								}
							}
						} else {
							FaceTarget$();
						}
						return;
					}
				}
			} 
			
			if( Math.RandomFloat( 1 ) < wander$ )
			{
//				report.generic("I want to wander\n");
				if( AIQuery.FindSpotRelativeToSource( 	m_Job$.InitPosition,
														1,
														min_distance$,
														move_distance$,
														2.0,
														m_Go$.IsHuded,
														m_Mind$.TempPos1 ) )
		   		{
					if ( m_Mind$.TempPos1.node.IsNodeInAnyFrustum && m_Go$.placement.position.node.IsNodeInAnyFrustum)
					{
						if( GetSiegeDistance(m_Mind$.TempPos1, m_Go$.placement.position ) > min_distance$ )
						{
							bool doit$ = true;
							
							if( wander_limit_dist$ > 0.0 )
							{
								m_Mind$.TempQtColl1.Clear;
								m_Mind$.TempGopColl1.Clear;
						
								AIQuery.GetOccupantsInSphere( m_Mind$.TempPos1, wander_limit_dist$, m_Mind$.TempGopColl1 );
	
								m_Mind$.TempQtColl1.Clear;
								m_Mind$.TempQtColl1.Add( QT_FRIEND );
								m_Mind$.TempQtColl1.Add( QT_ALIVE_CONSCIOUS );
				
								report.reportf( "aiskrit", "Wander:%d Actors at target position\n",AIQuery.GetCount( m_Go$, m_Mind$.TempQtColl1, m_Mind$.TempGopColl1 ));
								
								if( AIQuery.GetCount( m_Go$, m_Mind$.TempQtColl1, m_Mind$.TempGopColl1 ) >= wander_limit$ )
								{
									doit$ = false;
								}
							}
							if( doit$ )
							{
								MCPManager.Flush(m_Go$.Goid);
								ChangeSpeed$();
								eReqRetCode ret$ = MCPManager.MakeRequest( m_Go$.Goid, PL_APPROACH, m_Mind$.TempPos1, 0.2 );
								ResetSpeed$();
								if( RequestFailed(ret$) )
								{
									InterruptAndStartFidget$();
								}
							}
						}
					}
				}
			}
		}
	}
	
	event OnEnterState$
	{
		StartFidgetIfRequired$();
		
		if( !still$ )
		{
			This.CreateTimer( 1 , Math.RandomFloat( delay_min$, delay_max$ ) );
		}
	}
}