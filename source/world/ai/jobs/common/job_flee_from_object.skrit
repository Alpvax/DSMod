/*
  ============================================================================
  ----------------------------------------------------------------------------

	File		: 	job_flee_from_object.skrit

	Author(s)	: 	Bartosz Kijanka

	Purpose		: 	Run away like hell, then give up.

	(C)opyright 2000 Gas Powered Games, Inc.

  ----------------------------------------------------------------------------
  ============================================================================
*/

property	float	run_chance$			= 0.0		doc = "chance for this monster to run when fleeing.";

Go		m_Go$;
GoMind	m_Mind$;
Job		m_Job$;

float	m_OrigSpeed$;

////////////////////////////////////////////////////////////////////////////////
//	Helper Functions

void RunSpeed$()
{	
	m_Go$.Body.SetAvgMoveVelocity( m_Go$.Body.MaxMoveVelocity );
}

void ResetSpeed$()
{
	if( m_OrigSpeed$ > 0.0 )
	{
		m_Go$.Body.SetAvgMoveVelocity( m_OrigSpeed$ );
	}
}

////////////////////////////////////////////////////////////////////////////////
//	Startup

startup state Startup$
{
}


////////////////////////////////////////////////////////////////////////////////
//	init
event OnJobInitPointers$( Job job$ )
{
	m_Job$		= job$;
	m_Go$		= job$.Go;
	m_Mind$		= job$.Go.GetMind;
}


event OnJobInit$( Job job$ )
{
	OnJobInitPointers$( job$ );
	m_OrigSpeed$	= m_Go$.Body.AvgMoveVelocity;

	if( job$.GoalObject.Go == NULL )
	{
		SetState Exiting$;
	}

	SetState RequestAction$;
}


state RequestAction$
{
	event OnEnterState$
	{
		eReqRetCode ret$ = REQUEST_FAILED;

		if( AIQuery.FindSpotRelativeToSource( 	m_Go$, 
												m_Job$.GoalObject.Go, 
												true,
												m_Mind$.FleeDistance * 0.75,
												m_Mind$.FleeDistance,
												10,
												30,
												2.0,
												m_Mind$.TempPos1,
												false ) )
		{
			////////////////////////////////////////
			//	found decent spot to run to

			if( run_chance$ > Math.RandomFloat( 1 ) )
			{
				RunSpeed$();
			}	
			ret$ = MCPManager.MakeRequest( m_Go$.Goid, PL_APPROACH, m_Mind$.TempPos1, 0.1 );
			ResetSpeed$();
		}
		else
		{
			////////////////////////////////////////
			//	could not find decent spot, try running way towards/behind enemy if there are no
			//	enemies there.  otherwise stay and take your chances
			float min_dist$ =  Math.MinFloat( m_Mind$.FleeDistance * 2.0, 30.0);
			float max_dist$ =  Math.MinFloat( m_Mind$.FleeDistance * 3.0, 44.0);

			if( AIQuery.FindSpotRelativeToSource( 	m_Go$, 
													m_Job$.GoalObject.Go, 
													false,
													min_dist$,
													max_dist$,
													15,
													45,
													2.0,
													m_Mind$.TempPos1,
													false ) )
			{
				////////////////////////////////////////
				//	found decent spot to run to, check for enemies near there

				AIQuery.GetOccupantsInSphere( m_Mind$.TempPos1, 5.0, m_Mind$.TempGopColl1 );

				m_Mind$.TempQtColl1.Clear;
				m_Mind$.TempQtColl1.Add( QT_ENEMY );
				m_Mind$.TempQtColl1.Add( QT_ALIVE_CONSCIOUS );

				if( AIQuery.GetCount( m_Go$, m_Mind$.TempQtColl1, m_Mind$.TempGopColl1 ) == 0 )
				{
					if( run_chance$ > Math.RandomFloat( 1 ) )
					{
						RunSpeed$();
					}	
					ret$ = MCPManager.MakeRequest( m_Go$.Goid, PL_APPROACH, m_Mind$.TempPos1, 0.1 );
					ResetSpeed$();
				}
			}
		}

		if (ret$ == REQUEST_OK_IN_RANGE)
		{
			SetState( Exiting$ );
		}
		else if (ret$ == REQUEST_OK_BEYOND_RANGE)
		{
			SetState( MovingCloser$ );
		}
		else if ( RequestOk(ret$) )
		{
			SetState( WaitingForArrival$ );
		}
		else
		{
			SetState( Exiting$ );
		}
	}
}

state MovingCloser$
{
	transition
	{
		// For some reason we could not reach the target in one move request, will need to 
		// approach again when we finish
		-> RequestAction$: 	OnWorldMessage( WE_MCP_SECTION_COMPLETED );
		-> RequestAction$: 	OnWorldMessage( WE_ANIM_DONE );
		-> Exiting$:		OnWorldMessage( WE_MCP_DEPENDANCY_BROKEN );	// path blockage

		// Don't send a new request on a warning --biddle
	   	//-> RequestAction$: 	OnWorldMessage( WE_MCP_SECTION_COMPLETE_WARNING );
		-> RequestAction$: 	OnWorldMessage( WE_MCP_SECTION_COMPLETED );
	}
}


state WaitingForArrival$
{
	transition
	{
		// We are switching to the fidget that is automatic upon arrival

		// Do not flee until we actually arrive at the destination --biddle
		//
		// -> Exiting$:   	OnWorldMessage( WE_MCP_SECTION_COMPLETE_WARNING );
		//
		-> Exiting$:	OnWorldMessage( WE_MCP_SECTION_COMPLETED );
	}
}


state Exiting$
{
	event OnEnterState$
	{
		m_Job$.MarkForDeletion();
	}
}


