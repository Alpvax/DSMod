/*
  ============================================================================
  ----------------------------------------------------------------------------

	File		: 	job_drink.skrit

	Author(s)	: 	Bartosz Kijanka

	Purpose		: 	Take a swig of the "hard stuff."

	(C)opyright 2000 Gas Powered Games, Inc.

  ----------------------------------------------------------------------------
  ============================================================================
*/


Go		m_Go$;
GoMind	m_Mind$;
Job		m_Job$;
Goid	m_Beverage$;

Goid	m_Weapon$;
Goid	m_Shield$;

bool	m_bNoDrink$;

eInventoryLocation m_ilSelected$;


startup state STARTUP$
{
}


////////////////////////////////////////////////////////////////////////////////
//	init
event OnJobInitPointers$( Job job$ )
{
	m_Job$		= job$;
	m_Go$		= job$.Go;
	m_Mind$		= job$.Go.Mind;
	m_Beverage$	= job$.GoalObject;
	m_bNoDrink$	= false;
}


event OnJobInit$( Job job$ )
{
	OnJobInitPointers$( job$ );

	m_Go$.Inventory.SBeginUse( m_Beverage$ );

	if ( m_Go$.Inventory.SAutoUse( m_Beverage$, m_Job$.Origin, false ) == false )
	{		
		m_bNoDrink$ = true;
		SetState Exiting$;
	}
	else
	{
		SetState UnequippingGear$;
	}
}


////////////////////////////////////////////////////////////////////////////////
//	global event handler

trigger OnWorldMessage$( WE_JOB_DESTRUCTED )
{
	if ( m_bNoDrink$ == false )
	{
		SetState RequippingGear$;
	}
	else
	{
		SetState Exiting$;
	}
}

trigger OnWorldMessage$( WE_DESTRUCTED ) 	{ SetState Exiting$ ; }


////////////////////////////////////////////////////////////////////////////////
//	unequip

state UnequippingGear$
{
	event OnEnterState$
	{
		// make sure we're not doing anything else... $$$ - Mike, check this out. -bk
		MCPManager.Flush( m_Go$.Goid );

		////////////////////////////////////////
		//	unequip gear

		m_ilSelected$ = m_Go$.Inventory.GetSelectedLocation();

		Go weapon$ = m_Go$.Inventory.GetEquipped( ES_WEAPON_HAND );
		Go shield$ = m_Go$.Inventory.GetEquipped( ES_SHIELD_HAND );
	
		if( weapon$ != NULL )
		{
			m_Weapon$ = weapon$.Goid;
			m_Go$.Inventory.RSUnequip( ES_WEAPON_HAND, m_Job$.Origin );
		}

		if( shield$ != NULL )
		{
			m_Shield$ = shield$.Goid;
			m_Go$.Inventory.RSUnequip( ES_SHIELD_HAND, m_Job$.Origin );
		}

		////////////////////////////////////////
		//	equip potion
		m_Go$.Inventory.RSEquip( ES_WEAPON_HAND, m_Beverage$, m_Job$.Origin );

		SetState Drinking$;
	}
}


////////////////////////////////////////////////////////////////////////////////
//	drink

state Drinking$
{
	transition
	{
		-> ApplyBeverage$:		OnWorldMessage( WE_ANIM_DONE );
		-> RequippingGear$:		OnWorldMessage( WE_MCP_INVALIDATED );
	}

	event OnEnterState$
	{
		int drinkanim$ = m_Go$.Aspect.AspectHandle.Blender.GetSubAnimIndex(CHORE_MISC,'drnk');

		m_Beverage$.Go.PlayVoiceSound( "drink", true );		

		if (drinkanim$ >= 0)
		{
		   eReqRetCode ret$ = MCPManager.MakeRequest( m_Go$.Goid, PL_PLAYANIM, CHORE_MISC, drinkanim$, 0 );
		   if ( RequestFailed(ret$) )
		   {
			   SetState	ApplyBeverage$;
		   }
		}
		else
		{
			// No 'drink' animation in the chore
		   SetState	ApplyBeverage$;
		}
	}
}


////////////////////////////////////////////////////////////////////////////////
//	drink GOOOOOD

state ApplyBeverage$
{
	event OnEnterState$
	{		
		SetState RequippingGear$;
	}
}


////////////////////////////////////////////////////////////////////////////////
//	re-equip

state RequippingGear$
{
	event OnEnterState$
	{
		// make sure the weapon is still valid and part of our inventory ( we could have been killed while drinking, 
		// and out inventory could have been scattered during the execution of this job

		if( ( m_Weapon$.Go != NULL ) && m_Go$.Inventory.Contains( m_Weapon$.Go ) )
		{
			m_Go$.Inventory.RSEquip( ES_WEAPON_HAND, m_Weapon$, m_Job$.Origin );
		}
		else
		{
			// if we didn't have a weapon in hand, make sure to unequip the beverage
			m_Go$.Inventory.RSEquip( ES_WEAPON_HAND, Goid.NoneGoid, m_Job$.Origin );
		}

		if( ( m_Shield$.Go != NULL ) && m_Go$.Inventory.Contains( m_Shield$.Go ) )
		{
			m_Go$.Inventory.RSEquip( ES_SHIELD_HAND, m_Shield$, m_Job$.Origin );
		}

		m_Go$.Inventory.RSSelect( m_ilSelected$, m_Job$.Origin );
		
		m_Go$.Inventory.SEndUse( m_Beverage$ );

		m_Job$.MarkForDeletion();
	}
}

state Exiting$
{
	event OnEnterState$
	{
		m_Go$.Inventory.SEndUse( m_Beverage$ );
		m_Job$.MarkForDeletion();
	}
}
