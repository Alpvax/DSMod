//////////////////////////////////////////////////////////////////////////////
//
// File     :  trp_firetrap.skrit
// Author(s):  Rick Saenz, Scott Bilas
//
// Copyright © 2000 Gas Powered Games, Inc.  All rights reserved.
//----------------------------------------------------------------------------
//  $Revision:: $              $Date:$
//----------------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////////////

property bool	do_area_damage$		= false			doc = "Upon collision damage to an area will be initiated";
property bool	do_hit_damage$		= true			doc = "Upon collision damage to a go will be done";
property bool	use_params$			= false			doc = "Use script parameters";

property float	damage_min_hit$ 	= 7.0			doc = "Min damage for direct hit";
property float	damage_max_hit$ 	= 10.0			doc = "Max damage for direct hit";
property float	damage_min_area$	= 15.0			doc = "Min damage for explosion";
property float	damage_max_area$	= 25.0			doc = "Max damage for explosion";

property float	area_damage_radius$ = 1.0			doc = "Radius of area damage on explosion";
property float	exp_magnitude$		= 3.25			doc = "Magnitude of the explosion";

property float	reload_duration$ 	= 1.5			doc = "Duration of reload between shots";
property int	ammo_count$			= -1			doc = "Ammo fired per activation of trap (-1 for infinite)";
property string script_name$		= "firetrap"	doc = "SiegeFx script to run for shot";
property string script_params$	 	= "<ignite()>"	doc = "Parameters to send to SiegeFx script";


owner = GoSkritComponent;

int m_AmmoRemaining$;

//////////////////////////////////////////////////////////////////////////////


// it doesn't matter if we are on or off, if our ball hits someone, they take damage.
event OnGoHandleMessage$( eWorldEvent e$, WorldMessage msg$ )
{
	if( e$ == WE_SPELL_COLLISION )
	{
		if( do_hit_damage$ )
		{
			// For spell collisions the send from is game object that has been hit
			Rules.DamageGoTrap( msg$.SendFrom, Owner.Goid, Owner.Goid, damage_min_hit$, damage_max_hit$ );
		}
		if( do_area_damage$ )
		{
			float damage$ = Math.RandomFloat( damage_min_area$, damage_max_area$ );
			SiegePos position$ = ToSiegePosRef( msg$.Data1 );
			Physics.CreateExplosion( position$, area_damage_radius$, exp_magnitude$, damage$, owner.goid, owner.goid );
		}
	}
}


startup state Idle$
{
	transition -> Fire$: OnGoHandleMessage( WE_REQ_ACTIVATE ) =
	{
		m_AmmoRemaining$ = ammo_count$;
	}
}

state Fire$
{
	
	// fire again
	trigger OnTimer$( 1 )
	{
		SetState Fire$;
	}
		
	// toggle off
	transition -> Idle$: OnGoHandleMessage( WE_REQ_ACTIVATE );
	transition -> Idle$: OnGoHandleMessage( WE_REQ_DEACTIVATE );
	
	// fire new one
	event OnEnterState$
	{
		// play effect
		if ( m_AmmoRemaining$ != 0 )
		{
			if ( use_params$ )
			{
				SiegeFx.SRunScript( script_name$, owner.Goid, owner.Goid, script_params$, owner.Goid, WE_REQ_ACTIVATE );
			}
			else
			{
				SiegeFx.SRunScript( script_name$, owner.Goid, owner.Goid, "" , owner.Goid, WE_REQ_ACTIVATE );
			}
		}

		// run another?
		bool playAgain$ = true;
		if ( m_AmmoRemaining$ != -1 )
		{
			m_AmmoRemaining$ -= 1;
			if ( m_AmmoRemaining$ <= 0 )
			{
				playAgain$ = false;
			}
		}

		// take action
		if ( playAgain$ )
		{
			// go again after a little while
			this.CreateTimer( 1, reload_duration$ );
		}
		else
		{
			// back to idle
			SetState( Idle$ );
		}
	}
}

//////////////////////////////////////////////////////////////////////////////
