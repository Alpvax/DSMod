//////////////////////////////////////////////////////////////////////////////
//
// File     :  check_quest_bits.skrit
// Author(s):  Eric Tams
//
// Copyright © 2002 Gas Powered Games, Inc.  All rights reserved.
//----------------------------------------------------------------------------
//  $Revision:: $              $Date:$
//----------------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// public definitions

// reserved tags
property bool			_server_only$			= true;
property string			_doc$					= "Checks quest bits upon receiving we_req_activate, uses the goid in the data1 component.";

// exported properties
property string			bool_variable$								doc = "Name of the Bool variable";
property string			map_name$				= "multiplayer_world" doc = "Name of the map to associate this bool with";
property scid      		send_to_scid$								doc = "Scid of object to receive message";
property eWorldEvent	message_if_true$		= WE_REQ_ACTIVATE	doc = "Message to send if true";
property eWorldEvent	message_if_false$		= WE_REQ_DEACTIVATE doc = "Message to send if false";
property float			num_delay$				= 0					doc = "Number of seconds to delay sending the message";

property bool			sync_state_to_others$	= false				doc = "If the goid in the data1 component has the quest bool set then sync it to the other clients.";

property bool			sync_state_to_occupants_of_region$ = true   doc = "Sync the state to characters in the the specified region.";

property int 			region$					= 0					doc ="Property node occupant query, use with sync_state_to_occupants_of_region";
property int 			section$				= 0					doc ="Property node occupant query, use with sync_state_to_occupants_of_region";
property int 			level$					= 0					doc ="Property node occupant query, use with sync_state_to_occupants_of_region";
property int 			object$					= 0					doc ="Property node occupant query, use with sync_state_to_occupants_of_region";


owner = GoSkritComponent;

//////////////////////////////////////////////////////////////////////////////

trigger OnGoDrawDebugHud$
{
	Goid goid$ = send_to_scid$.Goid;
	if( goid$.IsValid )
	{
		World.DrawDebugDirectedLine( owner.go.Placement.Position,
									 goid$.go.Placement.Position,
									 MakeColor( 0.5, 1.0, 0, 0.5 ),
									 ToString( message_if_true$ ) );
	}
}

event OnGoHandleMessage$( eWorldEvent e$, WorldMessage msg$ )
{
	if( e$ == WE_REQ_ACTIVATE )
	{
		Goid Target$ = MakeGoid( msg$.data1 );
		
		if( Target$.IsValid )
		{
			if( GoDb.GetQuestBool( Target$, map_name$, bool_variable$, false ) || GameAuditor.GetDb.GetBool( bool_variable$ ) )
			{
				// make sure other people can ride the displacers now.
				GameAuditor.RCSetBool( bool_variable$, true );
				
				// if this player has the quest bool set sync it to the other players
				if( sync_state_to_others$ )
				{
					GoDb.SSetQuestBool( Goid.AnyGoid, map_name$, bool_variable$, true );
				}
				else if( sync_state_to_occupants_of_region$ )
				{
					AIQuery.TempGopColl1.clear();
					AIQuery.GetHumanPartyMembersInNodes ( region$, section$, level$, object$, AIQuery.TempGopColl1 );
					
					int i$ = 0;
					int iend$ = AIQuery.TempGopColl1.size;
					
					while ( i$ < iend$ )
					{
						go Temp$ = AIQuery.TempGopColl1.Get( i$ );
						if( Temp$ != null )
						{
							GoDb.SSetQuestBool( Temp$.Goid, map_name$, bool_variable$, true );
						}
						i$ += 1;
					}
				}
				
				PostWorldMessage( message_if_true$, owner.Goid, send_to_scid$, num_delay$ );
			}
			else
			{
				PostWorldMessage( message_if_false$, owner.Goid, send_to_scid$, num_delay$ );
			}
		}
	}
}
