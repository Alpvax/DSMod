//////////////////////////////////////////////////////////////////////////////
//
// File     :  generator_in_object.skrit
// Author(s):  Eric Tams, modified from generator_basic from SB
//
// Copyright © 2000 Gas Powered Games, Inc.  All rights reserved.
//----------------------------------------------------------------------------
//  $Revision:: $              $Date:$
//----------------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// public definitions

// reserved tags
property bool   _server_only$        = true;
property string _doc$                = "A pop out a guy when an object breaks generator";
property string _required_component$ = "placement";

// exported properties
property 	string		child_template_name$	="phrak"		doc ="template name of the actor to spawn";
property	eWorldEvent spawn_event$			= WE_EXPLODED	doc ="message to spawn new go on.";
property	float		spawn_chance$			= 0.25			doc ="chance to spawn 0-1";
property	float		spawn_delay$			= 0.0			doc ="delay before spawning child";
property	bool		fade_kid$				= false			doc ="fade in the kind instead of poping him in.";
property	bool		invis_kid$				= false			doc ="make the kid invis on spawn.";

owner = GoSkritComponent;

//////////////////////////////////////////////////////////////////////////////
// local states

trigger OnGoPreload$
{
	if(!StringTool.IsEmpty(child_template_name$))
	{
		GoDb.PreloadCloneSource( owner.Go, child_template_name$ );
	}
}

startup state WaitToSpawn$
{	
	event OnGoHandleMessage$( eWorldEvent e$, WorldMessage /*msg$*/ )
	{
		if( e$ == spawn_event$ )
		{
			if (spawn_delay$ > 0.0)
			{
				SetState Waiting$;
				
	   		} else {
	   			SetState Spawn$;
	   		}
	   	}
	}
}


state Waiting$
{
	event OnEnterState$
	{
		this.createTimer(1, spawn_delay$);
	}
	transition -> Spawn$: Ontimer(1);
}

state Spawn$
{
	event OnEnterState$
	{
		if (Math.RandomFloat(1.0) <= spawn_chance$)
		{
			GoCloneReq cloneReq$;
			cloneReq$ = MakeGoCloneReq( child_template_name$ );
			cloneReq$.StartingPos = owner.Go.Placement.Position;
			cloneReq$.SetStartingOrient = owner.Go.Placement.Orientation;
			if( fade_kid$ )
			{
				cloneReq$.FadeIn = true;
			}
			cloneReq$.SnapToTerrain = true;
   			Goid newGoid$	= GoDb.SCloneGo( cloneReq$ );
   			
   			if( invis_kid$ )
   			{
   				newGoid$.Go.Aspect.SSetIsVisible( false );
   			}
   		}
   		SetState Finished$;
   	}
}

state Finished$
{
}