//////////////////////////////////////////////////////////////////////////////
//
// File     :  door_basic.skrit
// Author(s):  James Loe and Uncle Ernsie and Eric Tams
//
// Copyright © 2000 Gas Powered Games, Inc.  All rights reserved.
//----------------------------------------------------------------------------
//  $Revision:: $              $Date:$
//----------------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////////////

//
// Scid Bits Key
// 0 = changed.
// 1 = Done.  true = Done
// 2 & 3 = State. 1 0 = closed, 0 0 = opening, 0 1 = open, 1 1 = closing
//

//////////////////////////////////////////////////////////////////////////////
// public definitions

// reserved tags
property bool   _server_only$        	= true;
property string _doc$                	= "Basic Open/Closed Door";
property string _required_component$	= "placement";

// exported properties
//----Use Toggle stuff----
property bool			use_toggle$				= false				doc = "door starts out non-uesable, but becomes useable on an activate. Will display locked message in the message block if not activated, and someone is trying to open it.";
//----General Properties----
property bool   		can_use$                = true             	doc = "If false you will not be able to use the door.";
property bool   		initially_open$			= false				doc = "If true the door will be open when constructed otherwise closed.";
property bool   		oneshot$        		= false				doc = "Use this to allow the door to open only once.";
property bool   		imediate_no_use$        = true				doc = "Use to make doors instantly not selectable/useable.";
property bool   		usable_on_open$        	= true				doc = "after door is open make selectable/useable again. (for use with imediate_no_use) ";
property bool   		non_blocking$ 			= false     		doc = "If true the door will never block pathfinding.";
property bool   		delete_on_open$ 		= false     		doc = "Delete this door after it has been opened.";
//----Double Door Handlers
property scid   		second_door$            					doc = "Scid of Second Door to open if double doors.";
//----Close Effects----
property Scid   		sfxpoint$                           		doc = "Scid of spawnpoint to attach sfx if applicable.";
property bool			close_sfx_on$			= false				doc = "Is the closing dust effect on?";
property bool   		close_sfx_at_sfxpoint$	= true          	doc = "Use an external spawnpoint for the effect location?";
property string			close_sfx$				= "door_dust"		doc = "Must Specify SiegeFx Script if Close Sfx On";
property string 		close_sfx_params$		= ""				doc = "Parameters for the SiegeFx script";  //Rick do I need this?  -J
property string			open_sfx$				= ""				doc = "Must Specify SiegeFx Script if Close Sfx On";
//----Messaging----
property bool   		msg_on_open$    		= true;
property bool   		msg_on_close$   		= true;
property scid 			msg_scid_opening$ 							doc = "Scid to send message to when door is opening";
property eWorldEvent 	msg_type_opening$		= WE_REQ_ACTIVATE	doc = "message to send when door is opening, ***DOORS CAN ONLY SEND WE_REQ_ACTIVATE/DEACTIVE and WE_TRIGGER_ACTIVATE/DEACTIVE FOR MULTIPLAYER***";
property scid 			msg_scid_open$ 								doc = "Scid to send message to when door is opened";
property eWorldEvent 	msg_type_open$			= WE_REQ_ACTIVATE	doc = "message to send when door is opened, ***DOORS CAN ONLY SEND WE_REQ_ACTIVATE/DEACTIVE and WE_TRIGGER_ACTIVATE/DEACTIVE FOR MULTIPLAYER***";
property scid 			msg_scid_open2$ 							doc = "second Scid to send message to when door is opened";
property eWorldEvent 	msg_type_open2$			= WE_REQ_ACTIVATE	doc = "second message to send when door is opened, ***DOORS CAN ONLY SEND WE_REQ_ACTIVATE/DEACTIVE and WE_TRIGGER_ACTIVATE/DEACTIVE FOR MULTIPLAYER***";
property scid 			msg_scid_open3$ 							doc = "third Scid to send message to when door is opened";
property eWorldEvent 	msg_type_open3$			= WE_REQ_ACTIVATE	doc = "third message to send when door is opened, ***DOORS CAN ONLY SEND WE_REQ_ACTIVATE/DEACTIVE and WE_TRIGGER_ACTIVATE/DEACTIVE FOR MULTIPLAYER***";
property scid 			msg_scid_close$ 							doc = "Scid to send message to when door is closed";
property eWorldEvent 	msg_type_close$			= WE_REQ_ACTIVATE	doc = "message to send when door is closed, ***DOORS CAN ONLY SEND WE_REQ_ACTIVATE/DEACTIVE and WE_TRIGGER_ACTIVATE/DEACTIVE FOR MULTIPLAYER***";

owner                                = GoSkritComponent;

//////////////////////////////////////////////////////////////////////////////

event OnGoDrawDebugHud$
{
#only( game )
[[
	World.DrawDebugPoint(	owner.Go.Placement.Position, 
							0.3, 
							MakeColor( 0.0, 1.0, 0.0 ), 
							0.333 , 
							Debug.Format( "Bits: 0x%x\n", Godb.GetScidBits( owner.scid ) ),
							MakeColor( 1.0, 1.0, 1.0 ));
]]
}

startup state Wait$
{
	trigger OnGoHandleMessage$( WE_ENTERED_WORLD )
	{
		int bits$ = Godb.GetScidBits( owner.scid );
		
//		report.genericf( "Bits: 0x%x\n", bits$ );
			
		if( bits$ == 0 ) // nothing has changed. In the default state.
		{
			if( !use_toggle$ )
			{
				if( initially_open$ )
				{
					MCPManager.MakeRequest( owner.goid, PL_PLAYANIM, CHORE_OPEN, 0, 1);
					#only( game )
		          	[[
						SetState Open$;
		            ]]
				}
				else
				{
		            #only( game )
		          	[[
						SetState Closed$;
		            ]]
				}
			}
			else
			{
				#only( game )
		        [[
		        owner.Go.Aspect.SetDoesBlockPath( true );
		       	]]
			}
		}
		else if ( Godb.GetScidBit( owner.scid, 1 ) ) // Door is done.
		{
			MCPManager.MakeRequest( owner.goid, PL_PLAYANIM, CHORE_OPEN, 0, 1);
			SetState Done$;
			return;
		}
		else if ( Godb.GetScidBit( owner.scid, 2 ) ) // Put the door back in the state it wan in when streamed out.
		{
			if ( Godb.GetScidBit( owner.scid, 3 ) )
			{
//				report.generic("setting state to closing\n");
				SetState Closing$;
			}
			else
			{
//				report.generic("setting state to closed\n");
				if( !oneshot$ )
				{
					MCPManager.MakeRequest( owner.goid, PL_PLAYANIM, CHORE_CLOSE, 0, 1);
				}
				SetState Closed$;
			}
		}
		else
		{
			if ( Godb.GetScidBit( owner.scid, 3 ) )
			{
//				report.generic("setting state to open\n");
				owner.Go.Aspect.SetDoesBlockPath( false );
				MCPManager.MakeRequest( owner.goid, PL_PLAYANIM, CHORE_OPEN, 0, 1);
				SetState Open$;
			}
			else
			{
//				report.generic("setting state to opening\n");
				owner.Go.Aspect.SetDoesBlockPath( false );
				SetState Opening$;
			}
		}
	}
	
	trigger OnGoHandleMessage$( WE_REQ_ACTIVATE )
	{
		if( use_toggle$ )
		{
			SetState Closed$;
		}
	}
		
	event OnGoHandleMessage$( eWorldEvent e$, WorldMessage msg$ )
	{	
		if( e$ == WE_REQ_USE ) 
		{
			if( use_toggle$ )
			{
				Goid user$ = msg$.GetSendFrom();
			
				if( user$.IsValid)
				{
					Report.SScreen( user$.Go.Player.MachineId, Report.Translate( owner.go.getmessage( "locked" ) ) );
					owner.Go.RCPlayVoiceSound( user$.Go.Player.MachineId, "door_blocked", true);
					owner.Go.RCPlayVoiceSound( user$.Go.Player.MachineId, "door_locked", true);
				}
			}
		}
	}
	
	event OnExitState$
	{
		// Set the used Bits
		Godb.SetScidBit( owner.scid, 0, true );
	}
}

state Closed$
{
	transition
	{
		-> Opening$: OnGoHandleMessage( WE_REQ_USE );
		-> Opening$: OnGoHandleMessage( WE_REQ_ACTIVATE );
	}
	
	event OnEnterState$
	{
        // Set the closed Bits
		Godb.SetScidBit( owner.scid, 2, true );
		
        // Set the closed Bits
		Godb.SetScidBit( owner.scid, 3, false );
		
		if (!can_use$)
        {
	    	Owner.Go.Aspect.SSetIsSelectable( false );
			Owner.Go.Aspect.SSetIsUsable( false );
		}
		if ( !non_blocking$ )
        {
			owner.Go.Aspect.SetDoesBlockPath( true );
    	}
	}
	
	event OnExitState$
	{
        can_use$ = true;

		owner.Go.SPlayMaterialSound( "door_open", "generic", true);
		
		if ( msg_scid_opening$.isvalid() )
		{
			SSendWorldMessage( msg_type_opening$, owner.Goid, msg_scid_opening$ );
		}
		
		Report.ReportF("jedi","[%8.3f] Transition [Closed$ -> Opening$] for %s\n",WorldTime.time,owner.goid.go.templatename);
		
		owner.Go.Aspect.SetDoesBlockPath( false );
		
		if ( second_door$.isvalid() )
	    {
			SPostWorldMessage( WE_REQ_ACTIVATE, owner.Goid, second_door$, 0);
	    }
		if (imediate_no_use$)
	    {
	    	Owner.Go.Aspect.SSetIsSelectable( false );
			Owner.Go.Aspect.SSetIsUsable( false );
	    }
	}
}


state Opening$
{
	transition
	{
		-> Open$: OnGoHandleMessage( WE_ANIM_DONE );
	}
	
	event OnEnterState$
	{
		// Set the closed Bits
		Godb.SetScidBit( owner.scid, 2, false );
		
		// Set the closed Bits
		Godb.SetScidBit( owner.scid, 3, false );
		
		// Request animation
		MCPManager.MakeRequest( owner.goid, PL_OPEN);
	}
	
	event OnExitState$
	{
		Report.ReportF("jedi","[%8.3f] Transition [Opening$ -> Open$] for %s\n",WorldTime.time,owner.goid.go.templatename);
		
		if ( open_sfx$ != "")
		{
			SiegeFx.SRunScript( open_sfx$, owner.Goid, owner.Goid, "", owner.Goid, WE_ANIM_DONE );
		}
		
		if ( msg_scid_open$.isvalid() )
		{
			SSendWorldMessage( msg_type_open$, owner.Goid, msg_scid_open$ );
		}
		if ( msg_scid_open2$.isvalid() )
		{
			SSendWorldMessage( msg_type_open2$, owner.Goid, msg_scid_open2$ );
		}
		if ( msg_scid_open3$.isvalid() )
		{
			SSendWorldMessage( msg_type_open3$, owner.Goid, msg_scid_open3$ );
		}
			
		owner.Go.SPlayMaterialSound( "door_opened", "generic", true);
		
        if (delete_on_open$)
    	{
    		PostWorldMessage( WE_REQ_DELETE, owner.Goid, owner.Goid, 2.0 );
    		SetState Done$;
    		return;
    	}
        if (oneshot$)
        {
            SetState Done$;
            return;
		}
		if (usable_on_open$)
		{
			Owner.Go.Aspect.SSetIsSelectable( true );
			Owner.Go.Aspect.SSetIsUsable( true );
		}
	}
}

state Open$
{
	transition
	{
		-> Closing$: OnGoHandleMessage( WE_REQ_USE );
		-> Closing$: OnGoHandleMessage( WE_REQ_ACTIVATE );
	}
	event OnEnterState$
    {
        // Set the closed Bits
		Godb.SetScidBit( owner.scid, 2, false );
		
		 // Set the closed Bits
		Godb.SetScidBit( owner.scid, 3, true );
		
		if (!can_use$)
        {
	    	Owner.Go.Aspect.SSetIsSelectable( false );
			Owner.Go.Aspect.SSetIsUsable( false );
		}
	}
	event OnExitState$
	{
		Report.ReportF("jedi","[%8.3f] Transition [Open$ -> Closing$] for %s\n",WorldTime.time,owner.goid.go.templatename);

        can_use$ = true;

		owner.Go.SPlayMaterialSound( "door_close", "generic", true);

	    if ( second_door$.isvalid() )
	    {
			//Send World Message
			SPostWorldMessage( WE_REQ_ACTIVATE, owner.Goid, second_door$, 0 );
		}
		if (imediate_no_use$)
	    {
	    	Owner.Go.Aspect.SSetIsSelectable( false );
			Owner.Go.Aspect.SSetIsUsable( false );
	    }
	}
}

state Closing$
{
	transition
	{
		-> Closed$: OnGoHandleMessage( WE_ANIM_DONE );
	}
	
	event OnEnterState$
	{
		// Set the closed Bits
		Godb.SetScidBit( owner.scid, 2, true );
		
		// Set the closed Bits
		Godb.SetScidBit( owner.scid, 3, true );
		
		// Request animation
		MCPManager.MakeRequest( owner.goid, PL_CLOSE);
	}
	
	event OnExitState$
	{
		if ( msg_scid_close$.isvalid() )
		{
			SSendWorldMessage( msg_type_close$, owner.Goid, msg_scid_close$ );
		}
		
		Report.ReportF("jedi","[%8.3f] Transition [Closing$ -> Closed$] for %s\n",WorldTime.time,owner.goid.go.templatename);
		Report.ReportF("jedi","close_sfx_at_sfxpoint = %s\n",close_sfx_at_sfxpoint$?"true":"false");
		Report.ReportF("jedi","close_sfx_on = %s\n",close_sfx_on$?"true":"false");
    	if (!non_blocking$)
        {
			owner.Go.Aspect.SetDoesBlockPath( true );
        }

        if ((close_sfx_at_sfxpoint$) && (close_sfx_on$))
		{
   			if ( SfxPoint$.IsValid() && SfxPoint$.goid.isvalid() )
			{
				Report.ReportF("jedi","[%8.3f] Starting an sfxpoint [%s][%s] for %s at %s\n",WorldTime.time,close_sfx$,close_sfx_params$,owner.goid.go.templatename,sfxPoint$.Goid.go.templatename);
				SFxSID ret$ = SiegeFx.SRunScript( close_sfx$, sfxPoint$.Goid, sfxPoint$.Goid, close_sfx_params$, sfxPoint$.Goid, WE_ANIM_DONE );
				Report.ReportF("jedi","Returned an ID value of %d\n",ret$);
			}
		}
        else if (close_sfx_on$)
		{
			Report.ReportF("jedi","[%8.3f] Starting a non-sfxpoint [%s][%s] for %s\n",WorldTime.time,close_sfx$,close_sfx_params$,owner.goid.go.templatename);
			SFxSID ret$ = SiegeFx.SRunScript( close_sfx$, owner.Goid, owner.Goid, close_sfx_params$, owner.Goid, WE_ANIM_DONE );
			Report.ReportF("jedi","Returned an ID value of %d\n",ret$);
		}		
		owner.Go.SPlayMaterialSound( "door_closed", "generic", true);
		if (usable_on_open$)
		{
			Owner.Go.Aspect.SSetIsSelectable( true );
			Owner.Go.Aspect.SSetIsUsable( true );
		}
	}
}

State Done$
{
	event OnEnterState$
	{
		// Set the done Bits
		Godb.SetScidBit( owner.scid, 1, true );
		
		Owner.Go.Aspect.SSetIsSelectable( false );
		Owner.Go.Aspect.SSetIsUsable( false );
	}
}