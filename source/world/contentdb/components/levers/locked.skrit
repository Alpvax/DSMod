//////////////////////////////////////////////////////////////////////////////
//
// File     :  locked.skrit
// Author(s):  Eric Tams
//
// Copyright © 2000 Gas Powered Games, Inc.  All rights reserved.
//----------------------------------------------------------------------------
//  $Revision:: $              $Date:$
//----------------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// public definitions

// reserved tags
property bool   _server_only$        	= true;
property string _doc$                	= "";
property string _required_component$ 	= "placement";

// exported properties
property string      key_template$							doc = "Template name of the key needed to open the lock.";
//----Messaging
property scid        Message_Scid$                          doc = "Scid to send message to when unlocked";
property eWorldEvent Message$			= WE_REQ_ACTIVATE   doc = "Message to send when unlocked";
property float       Message_Delay$                     	doc = "Message delay when unlocked";

owner = GoSkritComponent;

//////////////////////////////////////////////////////////////////////////////
// global state

event OnGoDrawDebugHud$
{
	if ( Message_Scid$.goid.isvalid() )
    {

		World.DrawDebugLinkedTerrainPoints(  owner.go.Placement.Position,
											 Message_Scid$.go.Placement.Position,
		                                     MakeColor( 0.0, 1.0, 0.0 ),
		                                     Debug.Format( "Sending Message: %s (%f) to %s\n", ToString(Message$), Message_Delay$, Message_Scid$.go.TemplateName ) );
	}
}
///////////////////////////////////////////////////////////////////////////////
// local states

startup state Wait$
{
	event OnGoHandleMessage$( eWorldEvent e$, WorldMessage msg$ )
	{
		if( e$ == WE_REQ_USE )
		{	
			#only( game )
			[[
			if( !StringTool.IsEmpty( key_template$ ) )
			{
				if ( Goid.InValidGoid != UIPartyManager.DoesActivePartyHaveTemplate( key_template$, msg$.SendFrom ) )
				{
					SetState Activate$;
				}
			}
			else
			{
				SetState Activate$;
			}
			]]
		}
    }
}

State Activate$
{
    event OnEnterState$
    {
		MCPManager.MakeRequest( owner.getgoid, PL_OPEN);
	
		//Play Sound
		owner.Go.SPlayMaterialSound( "lever_start", "generic", true);
	}

	transition -> Spinning$: OnGoHandleMessage( WE_ANIM_DONE );
}

State Spinning$
{
	event OnEnterState$
    {
    	MCPManager.MakeRequest( owner.getgoid, PL_CLOSE);
		
		if( Message_Scid$.Isvalid )
		{
			SPostWorldMessage( Message$, owner.Goid, Message_Scid$, Message_Delay$ );
		}
		
		Owner.Go.Aspect.SSetIsSelectable( false );
		Owner.Go.Aspect.SSetIsUsable( false );
    }
}

//////////////////////////////////////////////////////////////////////////////