//////////////////////////////////////////////////////////////////////////////
//
// File     :  nodal_tex_anim.skrit
// Author(s):  James Loe, Eric Tams
//
// Copyright © 2000 Gas Powered Games, Inc.  All rights reserved.
//----------------------------------------------------------------------------
//  $Revision:: $              $Date:$
//----------------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// public definitions

// reserved tags
property bool		_server_only$			= true;
property string		_doc$					= "Nodal texture animation state changing";

// exported properties
property SiegeId	siege_node$				= 0					doc = "Identifier of siege node whose textures you will be modifying";
property string		texture_name$			= ""				doc = "Name of the texture which you want to modify";
property string		texture_name2$			= ""				doc = "Name of the texture which you want to modify";
property string		texture_name3$			= ""				doc = "Name of the texture which you want to modify";
property float		duration$				= 0.0				doc = "Duration of the change in seconds (0 for instant)";
property int		start_state$			= -1				doc = "1 = active, 0 = inactive, -1 = default of texture";

owner = GoSkritComponent;

// globals
float time$;
bool bStop$;
bool animating$;
int   texture_index$;
int   texture_index2$;
int   texture_index3$;

//////////////////////////////////////////////////////////////////////////////

SetAnimationState$( bool Anim_state$ )
{
	if(  texture_index$ != -1 )
	{
		WorldTerrain.SSetNodalTextureAnimationState( siege_node$, texture_index$, Anim_state$ );
	}
	if(  texture_index2$ != -1 )
	{
		WorldTerrain.SSetNodalTextureAnimationState( siege_node$, texture_index2$, Anim_state$ );
	}
	if(  texture_index3$ != -1 )
	{
		WorldTerrain.SSetNodalTextureAnimationState( siege_node$, texture_index3$, Anim_state$ );
	}
	animating$ = Anim_state$;					
}

SetAnimationSpeed$( float speed$ )
{
	if(  texture_index$ != -1 )
	{
		WorldTerrain.SSetNodalTextureAnimationSpeed( siege_node$, texture_index$, speed$ );
	}
	if(  texture_index2$ != -1 )
	{
		WorldTerrain.SSetNodalTextureAnimationSpeed( siege_node$, texture_index2$, speed$ );
	}
	if(  texture_index3$ != -1 )
	{
		WorldTerrain.SSetNodalTextureAnimationSpeed( siege_node$, texture_index3$, speed$ );
	}
}

//////////////////////////////////////////////////////////////////////////////

startup state Constructed$
{
	// $ wait in this state until the siege node is in the world

	event OnGoUpdate$( float /*deltaTime$*/ )
	{
		if( siege_node$.IsValid )
		{
			texture_index$	= WorldTerrain.FindNodalTextureIndex( siege_node$, texture_name$ );
			texture_index2$	= WorldTerrain.FindNodalTextureIndex( siege_node$, texture_name2$ );
			texture_index3$	= WorldTerrain.FindNodalTextureIndex( siege_node$, texture_name3$ );
			
			if( texture_index$ != -1 )
			{
				animating$ = WorldTerrain.GetNodalTextureAnimationState( siege_node$, texture_index$ );
			} 
			else if( !( texture_index2$ != -1 ) )
			{
				animating$ = WorldTerrain.GetNodalTextureAnimationState( siege_node$, texture_index2$ );
			}
			else if( !( texture_index3$ != -1 ) )
			{
				animating$ = WorldTerrain.GetNodalTextureAnimationState( siege_node$, texture_index3$ );
			}
			else
			{
				// invalid coammand
				Report.ErrorF("Content Error.\nnodal_tex_anim: 0x%08x couldn't find specified textures!!\n",MakeInt( owner.scid ) );
				SetState Exit$;
				return;
			}
			if( start_state$ != -1 )
			{
				PostWorldMessage( ( start_state$ == 0 ) ? WE_REQ_DEACTIVATE : WE_REQ_ACTIVATE, owner.Goid, owner.Goid, 0 );
			}
			SetState Wait$;
		}
	}
}

state Wait$
{
	event OnGoHandleMessage$( eWorldEvent e$, WorldMessage /*msg$*/ )
	{
		if( (e$ == WE_REQ_ACTIVATE) && siege_node$.IsValid )
		{
			if( duration$ > 0 )
			{
				// Start the animation
				time$	= 0;
				bStop$	= false;

				if( !animating$ )
				{
					SetAnimationState$( true );
					SetState Play$;
				}
			}
			else
			{
				// Immediately activate the animation
				SetAnimationState$( true );
				SetAnimationSpeed$( 1.0 );
			}
		}

		if( (e$ == WE_REQ_DEACTIVATE) && siege_node$.IsValid )
		{
			if( duration$ > 0 )
			{
				time$	= 0;
				bStop$	= true;

				if( animating$ )
				{
					SetState Play$;
				}
			}
			else
			{
				// Immediately deactivate the animation
				SetAnimationState$( false );
			}
		}
	}
}

state Play$
{
	event OnGoUpdate$( float deltaTime$ )
	{
		time$ += deltaTime$;

		// Calculate and clamp linear scale
		float t$	= (time$ / duration$);
		t$			= (t$ > 1.0) ? 1.0 : t$;

		report.genericf("t$: %g\n",t$);

		// apply result
		if( siege_node$.IsValid )
		{
			if( bStop$ )
			{
				SetAnimationSpeed$( 1.0 - t$ );
			}
			else
			{
				SetAnimationSpeed$( t$ );
			}
		}

		// Update state
		if( t$ == 1.0 )
		{
			if( bStop$ )
			{
				SetAnimationState$( false );
			}

			SetState Wait$;
		}
	}

	event OnGoHandleMessage$( eWorldEvent e$, WorldMessage /*msg$*/ )
	{
		if( (e$ == WE_REQ_ACTIVATE) && (bStop$ == true) )
		{
			// Reset time
			bStop$	= false;
			time$	= duration$ - time$;
		}
		if( (e$ == WE_REQ_DEACTIVATE) && (bStop$ == false) )
		{
			// Reset time
			bStop$	= true;
			time$	= duration$ - time$;
		}
	}
}

state Exit$
{
}
//////////////////////////////////////////////////////////////////////////////
