//////////////////////////////////////////////////////////////////////////////
//
// File     :  spell_death_explosion.skrit
// Author(s):  Eric Tams
//
// Copyright © 2000 Gas Powered Games, Inc.  All rights reserved.
//----------------------------------------------------------------------------
//  $Revision:: $              $Date:$
//----------------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////////////

// This skrit will look for thihngs that the target kills and make explosions where they used to be.

// $Edited_by: Lokiswaq
// $Mod: BufUI
// $Revision: 0.97
// $Date: 6/4/2004

property string effect_script$    = ""  doc = "Name of the SiegeFx script that will be providing the visual.";
property string explode_script$    = ""  doc = "Name of the SiegeFx script that will be providing the visual target explodes.";
property string effect_params$    = ""     doc = "Parameters to send to SiegeFx script";
property string description$    = ""  doc = "Description of enchantment being applied";
property float  radius$        = 0.0  doc = "Radius of the explosion when you kill a bad guy.";

owner = GoSkritComponent;

#include "k_inc_spl_utils"
#include "k_inc_spl_lokiswaq_bufui"

Goid   target$;
Goid   caster$;
float   spell_duration$;
SFxSID  active_effect$;

startup state CastBegin$
{
   event OnGoHandleMessage$( eWorldEvent e$, WorldMessage msg$ )
  {
    if( e$ == WE_REQ_CAST ) {

      ////////////////////
      // Normal Go

      target$ = MakeGoid( msg$.GetData1() );
      caster$ = msg$.GetSendFrom();

      // Make sure we can only cast this spell on Hero
      if( !GoodBuffTarget$( target$ ) )
      {
        SetState Finished$;
        return;
      }

      if( Owner.go.Parent != NULL )
      {
        // create Omni version of the spell.
        GoCloneReq cloneReq$ = MakeGoCloneReq( Owner.go.Parent.Goid, owner.goid );
        cloneReq$.Omni = true;
        Goid new_spell$ = GoDb.SCloneGo( cloneReq$ );

        // send Omni version an Activate to get it started.
        PostWorldMessage( WE_REQ_ACTIVATE, caster$, new_spell$, msg$.GetData1(), 0 );
      }
      // delete normal version of the spell.
      SetState Finished$;

    } else if ( e$ == WE_REQ_ACTIVATE ) {

      ////////////////////
      // Omni Go

      target$ = MakeGoid( msg$.GetData1() );
      caster$ = msg$.GetSendFrom();

      if( !target$.IsValid || !caster$.Isvalid )
      {
        SetState RestoreState$;
        return;
      }
      spell_duration$ = owner.Go.Magic.EvaluateEffectDuration(caster$.Go, target$.Go);

      // Check to see if the enchantment has already been cast on this go
      if( target$.Go.Actor.HasGenericState( owner.Go.Magic.StateName ) ) {

        Goid old_spell$ = target$.Go.Actor.GetGenericStateSpellGoid ( owner.Go.Magic.StateName );

        if( StringTool.SameWithCase( old_spell$.Go.TemplateName, Owner.Go.TemplateName ))
        {
          int packed_speed$ = Math.Round( spell_duration$ * 1000 );
          SendWorldMessage( WE_SPELL_EXPIRATION_TIMER_RESET, owner.Goid, old_spell$ ,packed_speed$);

          SetState Finished$;
          return;
        } else {
          target$.Go.Actor.SRemoveGenericState( owner.Go.Magic.StateName );
          SendWorldMessage( WE_SPELL_EXPIRATION_TIMER_RESET, owner.Goid, old_spell$ , -1 );
        }
      }
      // Start the visual
      if(effect_script$ != "")
      {
        active_effect$ = SiegeFx.SRunMpScript( effect_script$, target$, caster$, effect_params$, owner.Goid, e$ );
      }
      // Add the effected state so this can only happen once
      target$.Go.Actor.SAddGenericState( owner.Go.Magic.StateName, description$, spell_duration$, caster$, owner.goid, owner.go.magic.GetMagicLevel( caster$.go ) );
      // Lokiswaq_BufUI store new buff info
      Set_ActBuff_List$( "insert", target$, owner.goid, spell_duration$ );
      // Lokiswaq_BufUI

      GoDb.StartWatching( owner.Goid, target$);

      SetState Waiting$;
    }
  }
}

state Waiting$
{
  ////////////////////
  // Omni Go

  int explosion_pos$;
  Goid killed$;

   event OnGoHandleCcMessage$( eWorldEvent e$, WorldMessage msg$ )
  {
    if( ( e$ == WE_ENGAGED_HIT_KILLED ) && ( target$ == msg$.GetSendTo() ) ) {

      killed$ = MakeGoid( msg$.GetData1() );

      if( (explode_script$ != "") && killed$.IsValidMp())
      {
        if ( ( target$.Go.Hasmind ) && ( killed$.Go.Player.Controller == PC_COMPUTER  ) )
        {
          Go selectedItem$ = target$.Go.Inventory.SelectedItem;
          if ( selectedItem$ != NULL )
          {
            if ( selectedItem$.IsMeleeWeapon )
            {
              SiegeFx.SetVariable(explosion_pos$, killed$.go.placement.position, owner.goid );
              this.CreateTimer( 2, 1 );
              SFxSID temp_effect$ = SiegeFx.SRunScript( explode_script$, killed$, killed$, "", owner.goid, WE_DAMAGED );
              Physics.CreateExplosion( SiegeFX.GetVariable(explosion_pos$, owner.goid), radius$, owner.Go.Physics.ExplosionMagnitude, Math.RandomFloat( owner.Go.Attack.DamageMin, owner.Go.Attack.DamageMax ), target$, selectedItem$.goid );
              killed$.Go.Aspect.AspectHandle.SetHideMeshFlag( true );
            }
          }
        }
      }
    }
    else if( ( e$ == WE_KILLED ) && ( target$ == msg$.GetSendTo() ) )
    {
      SetState RestoreState$;
    }
  }

  event OnGoHandleMessage$( eWorldEvent e$, WorldMessage msg$ )
  {
    if ( e$ == WE_SPELL_EXPIRATION_TIMER_RESET )
    {
      if(target$.IsValid)
      {
        if( msg$.GetData1() == -1)
        {
          SetState RestoreState$;
        } else {
          // remove stale state...
          target$.Go.Actor.SRemoveGenericState( owner.Go.Magic.StateName );

          // Lokiswaq_BufUI update spell duration
          float unpacked_duration$ = This.AddTimerSeconds( 1 , msg$.GetData1() / 1000.0 );
          // Add the effected state so this can only happen once
          target$.Go.Actor.SAddGenericState( owner.Go.Magic.StateName, description$, unpacked_duration$, caster$, owner.goid, owner.go.magic.GetMagicLevel( caster$.go ) );
          Set_ActBuff_List$( "update", target$, owner.goid, unpacked_duration$ );
          // Lokiswaq_BufUI
        }
      }
    }
  }

  transition -> RestoreState$: OnTimer(1);

  trigger OnTimer$( 2 )
  {
    GoDb.SMarkForDeletion( killed$ );
  }

  event OnEnterState$
  {
    explosion_pos$ = SiegeFx.AddVariable( owner.go.placement.position, owner.goid );

    this.CreateTimer( 1, spell_duration$ );
  }
}

state RestoreState$
{
  ////////////////////
  // Omni Go

  event OnEnterState$
  {
    // If the go is still alive then restore his state
    if( target$.IsValid ) {

      // we don't need to know what this guy is doing any more.
      GoDb.StopWatching( owner.Goid, target$);

      // remove the state so this can be affected again
      target$.Go.Actor.SRemoveGenericState( owner.Go.Magic.StateName );
      // Lokiswaq_BufUI invalidate active buff entry
      Set_ActBuff_List$( "delete", target$, owner.goid, 0.0 );
      // Lokiswaq_BufUI

      if (active_effect$ != 0)
      {
        SiegeFx.SStopScript( active_effect$ );
      }
    }
    SetState( Finished$ );
  }
}

state Finished$
{
  ////////////////////
  // Both Gos

  event OnEnterState$
  {
    // Get rid of any temporary storage
    SiegeFx.ClearVariables( owner.goid );

    // Delete this skrit
    PostWorldMessage( WE_REQ_DELETE, owner.Goid, owner.Goid, 10 );
  }
}