//////////////////////////////////////////////////////////////////////////////
//
// File     :  spell_multiple_hit.skrit
// Author(s):  Eric Tams
//
// Copyright © 2000 Gas Powered Games, Inc.  All rights reserved.
//----------------------------------------------------------------------------
//  $Revision:: $              $Date:$
//----------------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////////////

// This skrit will look for thihngs that the target kills and make explosions where they used to be.


property string effect_script$		= ""	doc = "Name of the SiegeFx script that will be providing the visual.";
property string hit_script$			= ""	doc = "Name of the SiegeFx script that will be providing the visual target explodes.";
property string effect_params$		= ""   	doc = "Parameters to send to SiegeFx script";
property string description$		= ""	doc = "Description of enchantment being applied";
property float  max_range$			= 5.0	doc = "Maximum distance between target for hit to occur";

owner = GoSkritComponent;
#include "k_inc_spl_utils"

Goid 	target$;
Goid 	caster$;
float 	spell_duration$;
SFxSID	active_effect$ = 0;

startup state CastBegin$
{
 	event OnGoHandleMessage$( eWorldEvent e$, WorldMessage msg$ )
	{
		if( e$ == WE_REQ_CAST ) {

			////////////////////
			// Normal Go
			
			target$ = MakeGoid( msg$.GetData1() );
			caster$ = msg$.GetSendFrom();
			
			if( !GoodBuffTarget$( target$ ) )
			{
				SetState Finished$;
				return;	
			}
			
			if( Owner.go.Parent != NULL )
			{
				// create Omni version of the spell.
				GoCloneReq cloneReq$ = MakeGoCloneReq( Owner.go.Parent.Goid, owner.goid );
				cloneReq$.Omni = true;
				Goid new_spell$ = GoDb.SCloneGo( cloneReq$ );
				
				// send Omni version an Activate to get it started.
				PostWorldMessage( WE_REQ_ACTIVATE, caster$, new_spell$, msg$.GetData1(), 0 );
			}
			// delete normal version of the spell.
			SetState Finished$;
		
		} else if ( e$ == WE_REQ_ACTIVATE ) {

			target$ = MakeGoid( msg$.GetData1() );
			caster$ = msg$.GetSendFrom();

			if( !target$.IsValid || !caster$.Isvalid )
			{
				SetState RestoreState$;
				return;
			}
			
			spell_duration$ = owner.Go.Magic.EvaluateEffectDuration( caster$.Go, target$.Go );

			// Check to see if the enchantment has already been cast on this go
			if( target$.Go.Actor.HasGenericState( owner.Go.Magic.StateName ) ) {
				
				Goid old_spell$ = target$.Go.Actor.GetGenericStateSpellGoid ( owner.Go.Magic.StateName );
				
				if( StringTool.SameWithCase( old_spell$.Go.TemplateName, Owner.Go.TemplateName ))
				{
					int packed_speed$ = Math.Round( spell_duration$ * 1000 );
					SendWorldMessage( WE_SPELL_EXPIRATION_TIMER_RESET, owner.Goid, old_spell$ ,packed_speed$);
				
					SetState Finished$;
					return;
				} else {
					target$.Go.Actor.SRemoveGenericState( owner.Go.Magic.StateName );
					SendWorldMessage( WE_SPELL_EXPIRATION_TIMER_RESET, owner.Goid, old_spell$ , -1 );
				}
			}
			
			// Start the visual
			if(effect_script$ != "")
			{
				active_effect$ = SiegeFx.SRunMpScript( effect_script$, target$, caster$, effect_params$, owner.Goid, e$ );
			}
			// Add the effected state so this can only happen once
			target$.Go.Actor.SAddGenericState( owner.Go.Magic.StateName, description$, spell_duration$, caster$, owner.goid, owner.go.magic.GetMagicLevel( caster$.go ) );
			
			GoDb.StartWatching( owner.Goid, target$);
			
			SetState Waiting$;
		}
	}
}

state Waiting$
{
	event OnGoHandleMessage$( eWorldEvent e$, WorldMessage msg$ )
	{
		if ( e$ == WE_SPELL_EXPIRATION_TIMER_RESET )
		{	
			if(target$.IsValid)
			{
				if( msg$.GetData1() == -1)
				{
					SetState RestoreState$;
				} else {
					// remove stale state...
					target$.Go.Actor.SRemoveGenericState( owner.Go.Magic.StateName );
					
					// Add the effected state so this can only happen once
					target$.Go.Actor.SAddGenericState( owner.Go.Magic.StateName, description$, This.AddTimerSeconds( 1 , msg$.GetData1() / 1000.0 ) , caster$, owner.goid, owner.go.magic.GetMagicLevel( caster$.go ) );
				}
			}
		}
	}
	
	event OnGoHandleCcMessage$( eWorldEvent e$, WorldMessage msg$ )
	{
		if( ( e$ == WE_KILLED ) && ( target$ == msg$.GetSendTo() ) )
		{
			SetState RestoreState$;
		} 
		else if( e$ == WE_ANIM_WEAPON_FIRE ) 
		{
			if ( target$.IsValidMp )
			{
				if ( target$.Go.Hasmind )
				{
					Job Action$ = target$.Go.Mind.GetFrontJob( JQ_ACTION );
					if( Action$ != NULL )
					{
						if( Action$.JobAbstractType == JAT_ATTACK_OBJECT_MELEE )
						{
							//report.generic("I'm attacking\n");
							Goid Weapon$ = Goid.InvalidGoid;
							Goid HitWeapon$;
							if ( target$.Go.HasInventory ) {	
								Go temp_weapon$ = target$.Go.Inventory.SelectedWeapon;
								if( temp_weapon$ != NULL )
								{
									Weapon$ = target$.Go.Inventory.SelectedWeapon.Goid;
								}
							} 
							
							if( !Weapon$.IsValid )
							{
								Weapon$ = target$;
							}
							
							target$.Go.Mind.TempGopColl1.Clear;
							target$.Go.Mind.GetEnemiesInSphere( max_range$, target$.Go.Mind.TempGopColl1 );
							
							int i$ = 0;
							int num_hit$ = 0;
							Go temp$;
							while( (i$ < target$.Go.Mind.TempGopColl1.Size()) && (num_hit$ < 2))
							{
								//report.generic("found someone to kill.\n");
								temp$ = target$.Go.Mind.TempGopColl1.Get( i$ );
								if( temp$.goid.IsValidMp && ( temp$.goid != Action$.GoalObject ) )
								{
									HitWeapon$ = Goid.InvalidGoid;
									
									if ( temp$.HasInventory ) {	
										Go temp_weapon$ = temp$.Inventory.SelectedWeapon;
										if( temp_weapon$ != NULL )
										{
											HitWeapon$ = temp$.Inventory.SelectedWeapon.goid;
										}
									}
									
									if (!HitWeapon$.IsValid) {
										HitWeapon$ = temp$.goid;
									}
									
									if( Rules.CanHit( target$, temp$.goid, Weapon$, HitWeapon$ ) )
									{
										SiegeFx.SRunScript( hit_script$, temp$.goid, target$, effect_params$, owner.Goid, e$ );
										Rules.DamageGoMelee( target$, Weapon$, temp$.goid );
										//report.generic("hit.\n");
									} else {
										//report.generic("miss.\n");
									}
									num_hit$ += 1;
								}
						        i$ += 1;
						    }		
						}
					}
				}
			}
		}
	}
	
	transition -> RestoreState$: OnTimer(1);
	
	event OnEnterState$
	{
		this.CreateTimer( 1, spell_duration$ );
	}
}

state RestoreState$
{
	event OnEnterState$
	{
		// If the go is still alive then restore his state
		if( target$.IsValid ) {
//			report.generic("restoring state!!\n");
			GoDb.StopWatching( owner.Goid, target$);
				
			// remove the state so this can be affected again
			target$.Go.Actor.SRemoveGenericState( owner.Go.Magic.StateName );	
			
			if (active_effect$ != 0)
			{
//				report.generic("removing effect!!\n");
				SiegeFx.SStopScript( active_effect$ );
			}
		}
		SetState( Finished$ );
	}
}

state Finished$
{
	event OnEnterState$
	{
		// Delete this skrit
		PostWorldMessage( WE_REQ_DELETE, owner.Goid, owner.Goid, 1 );
	}
}