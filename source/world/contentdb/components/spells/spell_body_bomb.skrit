//////////////////////////////////////////////////////////////////////////////
//
// File     :  spell_body_bomb.skrit
// Author(s):  Eric Tams
//
// Copyright © 2001 Gas Powered Games, Inc.  All rights reserved.
//----------------------------------------------------------------------------
//  $Revision:: $              $Date:$
//----------------------------------------------------------------------------
//
// note: checking to see that the target was a body was removed, this should be
// 			handled in the spell definition in spl_spell.
//
//////////////////////////////////////////////////////////////////////////////

property string	effect_script$		= ""	doc = "Effect script to call for effect";
property float	particle_fit$		= -1.0	doc = "set this between 0 and 1 and fire damage will be passed as a parameter ot the FX script";
property bool	award_mana$			= false doc = "Give caster mana dependant on the life of the body.";
property bool	make_explosion$		= false doc = "Create an explosion centered on the dead body.";
property string immunity$					doc = "If the target contains this membership then it is immune to this spell.";
property bool	fade_body$			= true	doc = "fade body when deleting it";

owner 	= GoSkritComponent;

Goid 		target$;
Goid 		caster$;

startup state Idle$
{
	event OnGoHandleMessage$( eWorldEvent e$, WorldMessage msg$ )
	{	
		if( e$ == WE_REQ_CAST )
		{
			target$ 			= MakeGoid( msg$.GetData1() );
			caster$ 			= msg$.GetSendFrom();
			
			if( !target$.IsValidMp || !caster$.IsValidMp )
			{
				SetState Finished$;
				return;
			}
			
			string params$ = "";
			if( particle_fit$ > 0.0 )
			{
				StringTool.AppendF( params$, "[ignite()fdamage(%g,%g,%g)]", owner.Go.Attack.DamageMin, owner.Go.Attack.DamageMax, particle_fit$ );
			}
			
			if ( award_mana$ )
			{
				Rules.ChangeMana( caster$, target$.Go.Aspect.MaxLife );
			}
			
			Siegefx.SRunScript(effect_script$,target$,caster$,params$,owner.goid, e$ );
			
			if( !StringTool.IsEmpty( immunity$ ) )
			{
				if( target$.Go.Common.Membership.Contains( immunity$ ) )
				{
					SetState Finished$;
					return;
				}
			}
			
			if( target$.Go.Player.Controller != PC_COMPUTER  )
			{
				SetState Finished$;
				return;
			}
			
			SetState( Pop$ );
		}
	}
}

state Pop$
{
	transition -> Explode$: OnTimer( 1 );
	
	trigger OnGoHandleMessage$( WE_SPELL_SYNC_MID )
	{
		if(target$.IsValid())
		{
			if (make_explosion$)
			{
				float damage$ = Math.RandomFloat( owner.Go.Attack.DamageMin, owner.Go.Attack.DamageMax );
			
				Physics.CreateExplosion( target$.go.placement.position, owner.Go.Attack.AreaDamageRadius, owner.Go.Physics.ExplosionMagnitude, damage$, caster$, owner.goid );
			}
			
			Rules.DamageGo( target$, target$, target$, target$.Go.Aspect.MaxLife * 3.0, true, false );
		}
		this.CreateTimer( 1, 0 );
	}
}
			
state Explode$
{
	event OnEnterState$
	{
		if(target$.IsValid())
		{
			GoDb.SMarkGoAndChildrenForDeletion( target$, true, fade_body$ );
		}
		SetState Finished$;
	}
}
			
state Finished$
{
	event OnEnterState$
	{
		// Since this skrit is the component of a spell and all spells are cloned before being executed
		// then it is safe to destroy ourself after finishing execution
		PostWorldMessage( WE_REQ_DELETE, owner.Goid, owner.Goid, 10 );	
	}
}