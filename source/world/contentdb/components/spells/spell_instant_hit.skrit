//////////////////////////////////////////////////////////////////////////////
//
// File     :  spell_instant_hit.skrit
// Author(s):  Eric Tams
//
// Copyright © 2001 Gas Powered Games, Inc.  All rights reserved.
//----------------------------------------------------------------------------
//  $Revision:: $              $Date:$
//----------------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////////////

// This skrit damages the target when the a spell sync message is recieved.


property float timeout$ 	 =	10.0		doc = "Number of seconds to wait before destroying the spell go";
property bool piercing$ 	 =	false		doc = "Damage done is piercing damage.";
property bool apply_enchant$ =	false		doc = "Apply encnatments when damage is done.";

owner = GoSkritComponent;
Goid 	target$;
Goid 	caster$;

startup state Idle$
{
	event OnGoHandleMessage$( eWorldEvent e$, WorldMessage msg$ )
	{	
		if( e$ == WE_REQ_CAST )
		{
			target$ 			= MakeGoid( msg$.GetData1() );
			caster$ 			= msg$.GetSendFrom();
		}
	}
	transition -> Finished$: OnGoHandleMessage( WE_SPELL_SYNC_MID );
}

state Finished$
{
	event OnEnterState$
	{	
		if( target$.IsValid && caster$.IsValid )
		{
			if( apply_enchant$ )
			{
				owner.go.magic.SApplyEnchantments( caster$, target$ );
			}
			if( piercing$ )
			{
				float damage$ = Math.RandomFloat( owner.Go.Attack.DamageMin, owner.Go.Attack.DamageMax );
				Rules.AwardExperience( caster$, owner.goid, Rules.CalculateExperience( caster$, owner.goid, target$, damage$ ) );
				Rules.DamageGo( target$, caster$, owner.goid, damage$, true, false );
			}
			else
			{
				Rules.DamageGoMagic( caster$, owner.goid, target$, target$.Go.Placement.Position );
			}
		}
		
		// Need to wait a little bit before deleting this spell for communication reasons
		// dealing with transference of ownership for explosion experience from propagation
		// by way of chain reaction
		PostWorldMessage( WE_REQ_DELETE, owner.Goid, owner.Goid, timeout$ );
	}
}
