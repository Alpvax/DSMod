//PLEASE LEAVE THIS FILE IN HERE FOR THE TIME BEING FOR REFERANCE  -J

//////////////////////////////////////////////////////////////////////////////
//
// File     :  mood_manager.skrit
// Author(s):  James Loe
//
// Copyright © 2000 Gas Powered Games, Inc.  All rights reserved.
//----------------------------------------------------------------------------
//  $Revision:: $              $Date:$
//----------------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// public definitions
//
// reserved tags
//property bool   _server_only$		= false;
//property string _doc$				= "Controls mood management";
//
//float battleTime$					= 0.0;	// Track of time the party has been in battle
//float battleDelay$					= 2.0; // Delay in seconds before battle music starts playing
//float battleMusicTime$				= 0.0; // Time the battle music will playing beyond the end of the battle
//
//////////////////////////////////////////////////////////////////////////////
//
//ManageMoods$( GoidColl partyMembers$, bool /*instantSwitch$*/, float secondsElapsed$ )
//{
//	// Get the first go in the party
//	Goid activeGo$	= partyMembers$.Get( 0 );
//
//	// Set it as the active go for all mood components
//	Mood.SetActiveSunGo( activeGo$, 0.0 );
//	Mood.SetActiveFogGo( activeGo$, 0.0 );
//	Mood.SetActiveRainGo( activeGo$, 0.0 );
//	Mood.SetActiveSnowGo( activeGo$, 0.0 );
//	Mood.SetActiveWindGo( activeGo$, 0.0 );
//	Mood.SetActiveMusicGo( activeGo$, 0.0 );
//
//	// Always play ambient theme
//	Mood.PlayAmbientTrack( 0.0 );
//
//	// Get the number of party members in battle
//	int numPartyMembersInBattle$	= 0;
//	int i$							= 0;
//	while( i$ < partyMembers$.Size() )
//	{
//		Job j$ = partyMembers$.Get( i$ ).GetGo.Mind.GetFrontJob( JQ_ACTION );
//		if( j$ != NULL )
//		{
//			if( IsAttackJat( j$.GetJobAbstractType() ) )
//			{
//				numPartyMembersInBattle$ += 1;
//			}
//		}
//
//        i$ += 1;
//    }
//
//    // See if the majority is in battle
//    if( numPartyMembersInBattle$ > (partyMembers$.Size()/2) )
//    {
//        battleTime$ += secondsElapsed$;
//
//        // See if we have reach battleTime threshold
//        if( battleTime$ > battleDelay$ )
//        {
//            // Set battle music time
//            battleMusicTime$    = 10.0;
//
//            // Play battle music if it is not already playing
//            if( !Mood.IsBattleTrackPlaying() )
//            {
//                Mood.StopStandardTrack( 2.0 );
//                Mood.PlayBattleTrack( 2.0 );
//            }
//        }
//    }
//    else
//    {
//        // Clear battle time
//		battleTime$	= 0.0;
//
//		// Update battle music time
//		battleMusicTime$ -= secondsElapsed$;
//
//		if( battleMusicTime$ <= 0.0 )
//		{
//			battleMusicTime$ = 0.0;
//
//			// Play standard music if it is not already playing
//			if( !Mood.IsStandardTrackPlaying() )
//			{
//				Mood.StopBattleTrack( 2.0 );
//				Mood.PlayStandardTrack( 2.0 );
//			}
//		}
//	}
//}

//////////////////////////////////////////////////////////////////////////////

/*****************************************************************************
**							DOCUMENTATION									**
******************************************************************************

	// If you need to retrieve information about a mood, use the following:

	Mood.GetGoRequestedMood( goid );			// Get the name of the mood requested by this GO
	Mood.GetGoMoodSetting( goid );				// Get the setting requested by the GO
	Mood.GetMoodSetting( moodName );			// Get the setting for the mood of this name

	// You can manually activate a mood by name by doing:

	Mood.SetMood( moodName, transTime );		// Transition to the given mood over transTime

	// Or you can activate individual mood components directly from
	// the GO by doing:

	Mood.SetActiveSunGo( goid, transTime );		// Set the active sun mood to this GO's mood, transitioning over transTime
	Mood.SetActiveFogGo( goid, transTime );		// Set the active fog mood to this GO's mood, transitioning over transTime
	Mood.SetActiveRainGo( goid, transTime );	// Set the active rain mood to this GO's mood, transitioning over transTime
	Mood.SetActiveSnowGo( goid, transTime );	// Set the active snow mood to this GO's mood, transitioning over transTime
	Mood.SetActiveWindGo( goid, transTime );	// Set the active wind mood to this GO's mood, transitioning over transTime
	Mood.SetActiveMusicGo( goid, transTime );	// Set the active music mood to this GO's mood, transitioning over transTime

	// You can retreive information about the GO's that are currently
	// controlling different parts of the mood by calling:

	Mood.GetActiveSunGo();						// Get the active sun GO
	Mood.GetActiveFogGo();						// Get the active fog GO
	Mood.GetActiveRainGo();						// Get the active rain GO
	Mood.GetActiveSnowGo();						// Get the active snow GO
	Mood.GetActiveWindGo();						// Get the active wind GO
	Mood.GetActiveMusicGo();					// Get the active music GO

	// By default, all music is disabled.  To play any tracks, you must specify the tracks
	// to play and the time to fade the track in.  For example, to fade in the a theme:

	Mood.PlayStandardTrack( 0.0 );				// Instantly start playing the standard theme
	Mood.PlayBattleTrack( 2.0 );				// Fade in battle theme over 2 seconds
	Mood.PlayAmbientTrack( 10.0 );				// Fade in ambient theme over 10 seconds

	// Once you have started a theme, you are also responsible for stopping it.  To fade out
	// the a theme, you would do:

	Mood.StopStandardTrack( 1.0 );				// Fade out standard theme over 1 second
	Mood.StopBattleTrack( 0.0 );				// Instantly stop playing the battle theme
	Mood.StopAmbientTrack( 2.0 );				// Fade our ambient theme of 2 seconds

	// In many cases, you may need to determine if a theme is playing.  To do this:

	Mood.IsStandardTrackPlaying();				// See if standard track is currently playing or not
	Mood.IsBattleTrackPlaying();				// See if battle track is currently playing or not
	Mood.IsAmbientTrackPlaying();				// See if ambient track is currently playing or not

******************************************************************************
**							END DOCUMENTATION								**
*****************************************************************************/